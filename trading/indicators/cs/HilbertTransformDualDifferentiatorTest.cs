using Mbst.Trading.Indicators.JohnEhlers;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;

namespace Tests.Indicators.JohnEhlers
{
    [TestClass]
    public class HilbertTransformDualDifferentiatorTest
    {
        #region Test data
        /// <summary>
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MAMA.xsl, price, D5…D256, 252 entries.
        /// </summary>
        private readonly List<double> rawInput = new List<double>
        {
             92.0000,  93.1725,  95.3125,  94.8450,  94.4075,  94.1100,  93.5000,  91.7350,  90.9550,  91.6875,
             94.5000,  97.9700,  97.5775,  90.7825,  89.0325,  92.0950,  91.1550,  89.7175,  90.6100,  91.0000,
             88.9225,  87.5150,  86.4375,  83.8900,  83.0025,  82.8125,  82.8450,  86.7350,  86.8600,  87.5475,
             85.7800,  86.1725,  86.4375,  87.2500,  88.9375,  88.2050,  85.8125,  84.5950,  83.6575,  84.4550,
             83.5000,  86.7825,  88.1725,  89.2650,  90.8600,  90.7825,  91.8600,  90.3600,  89.8600,  90.9225,
             89.5000,  87.6725,  86.5000,  84.2825,  82.9075,  84.2500,  85.6875,  86.6100,  88.2825,  89.5325,
             89.5000,  88.0950,  90.6250,  92.2350,  91.6725,  92.5925,  93.0150,  91.1725,  90.9850,  90.3775,
             88.2500,  86.9075,  84.0925,  83.1875,  84.2525,  97.8600,  99.8750, 103.2650, 105.9375, 103.5000,
            103.1100, 103.6100, 104.6400, 106.8150, 104.9525, 105.5000, 107.1400, 109.7350, 109.8450, 110.9850,
            120.0000, 119.8750, 117.9075, 119.4075, 117.9525, 117.2200, 115.6425, 113.1100, 111.7500, 114.5175,
            114.7450, 115.4700, 112.5300, 112.0300, 113.4350, 114.2200, 119.5950, 117.9650, 118.7150, 115.0300,
            114.5300, 115.0000, 116.5300, 120.1850, 120.5000, 120.5950, 124.1850, 125.3750, 122.9700, 123.0000,
            124.4350, 123.4400, 124.0300, 128.1850, 129.6550, 130.8750, 132.3450, 132.0650, 133.8150, 135.6600,
            137.0350, 137.4700, 137.3450, 136.3150, 136.4400, 136.2850, 129.0950, 128.3100, 126.0000, 124.0300,
            123.9350, 125.0300, 127.2500, 125.6200, 125.5300, 123.9050, 120.6550, 119.9650, 120.7800, 124.0000,
            122.7800, 120.7200, 121.7800, 122.4050, 123.2500, 126.1850, 127.5600, 126.5650, 123.0600, 122.7150,
            123.5900, 122.3100, 122.4650, 123.9650, 123.9700, 124.1550, 124.4350, 127.0000, 125.5000, 128.8750,
            130.5350, 132.3150, 134.0650, 136.0350, 133.7800, 132.7500, 133.4700, 130.9700, 127.5950, 128.4400,
            127.9400, 125.8100, 124.6250, 122.7200, 124.0900, 123.2200, 121.4050, 120.9350, 118.2800, 118.3750,
            121.1550, 120.9050, 117.1250, 113.0600, 114.9050, 112.4350, 107.9350, 105.9700, 106.3700, 106.8450,
            106.9700, 110.0300,  91.0000,  93.5600,  93.6200,  95.3100,  94.1850,  94.7800,  97.6250,  97.5900,
             95.2500,  94.7200,  92.2200,  91.5650,  92.2200,  93.8100,  95.5900,  96.1850,  94.6250,  95.1200,
             94.0000,  93.7450,  95.9050, 101.7450, 106.4400, 107.9350, 103.4050, 105.0600, 104.1550, 103.3100,
            103.3450, 104.8400, 110.4050, 114.5000, 117.3150, 118.2500, 117.1850, 109.7500, 109.6550, 108.5300,
            106.2200, 107.7200, 109.8400, 109.0950, 109.0900, 109.1550, 109.3150, 109.0600, 109.9050, 109.6250,
            109.5300, 108.0600
        };

        /// <summary>
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MAMA.xsl, smooth, E5…E256, 252 entries.
        /// </summary>
        private readonly List<double> smoothedInput = new List<double>
        {
             00.00000,  00.00000,  00.00000,  94.36625,  94.59625,  94.46650,  93.99900,  93.00675,  92.01350,  91.65850,
             92.67075,  94.97100,  96.49075,  94.63025,  92.16025,  91.46200,  90.97525,  90.55575,  90.59975,  90.64200,
             89.96275,  88.94375,  87.71400,  85.88250,  84.40700,  83.44750,  82.97125,  84.41025,  85.61475,  86.70850,
             86.62175,  86.39850,  86.33750,  86.64375,  87.65475,  88.05700,  87.29900,  86.11650,  84.82450,  84.37950,
             83.92750,  85.01975,  86.44925,  87.86425,  89.43625,  90.24125,  91.07725,  90.94450,  90.50225,  90.58500,
             90.08475,  89.08950,  87.89400,  86.14750,  84.51500,  84.07875,  84.55975,  85.49100,  86.85850,  88.18850,
             88.97725,  88.82275,  89.53175,  90.65050,  91.27400,  92.04825,  92.54175,  92.05925,  91.60800,  90.98250,
             89.72750,  88.41200,  86.39700,  84.70925,  84.16650,  89.46650,  94.47725,  99.26575, 103.11550, 103.82175,
            103.80800, 103.67075, 103.91100, 105.15100, 105.31450, 105.51275, 106.17800, 107.63125, 108.83650, 110.00850,
            114.23800, 117.13150, 118.22400, 119.11025, 118.57225, 117.94600, 116.95425, 115.17600, 113.48350, 113.51825,
            113.91425, 114.69000, 114.05375, 113.13950, 113.03600, 113.37750, 115.99400, 117.25200, 118.21650, 117.17900,
            115.86050, 115.23650, 115.52100, 117.48600, 119.06150, 120.07800, 121.97100, 123.57450, 123.69700, 123.58450,
            123.80550, 123.60350, 123.83100, 125.61450, 127.46750, 129.28650, 130.95000, 131.67000, 132.70200, 134.05600,
            135.48150, 136.61200, 137.15200, 136.92700, 136.68650, 136.44350, 133.44300, 130.95350, 128.34050, 125.98350,
            124.81400, 124.59850, 125.59900, 125.82250, 125.85100, 125.07000, 123.10150, 121.51650, 120.82300, 121.89250,
            122.46450, 122.00000, 121.88400, 121.91800, 122.44950, 124.10800, 125.77000, 126.45600, 125.32400, 124.07300,
            123.51900, 122.85000, 122.66850, 123.14650, 123.50150, 123.89250, 124.21100, 125.35850, 125.60250, 127.04350,
            128.67650, 130.41150, 132.31500, 134.15000, 134.36700, 133.84750, 133.57250, 132.35700, 130.29800, 129.19550,
            128.32400, 127.15350, 126.02500, 124.43150, 123.95800, 123.52150, 122.61800, 121.84850, 120.19550, 119.16150,
            119.72400, 120.21150, 119.19000, 116.65800, 115.39550, 113.77000, 111.19150, 108.74600, 107.16950, 106.63650,
            106.71250, 108.10900, 101.48750,  97.42700,  94.71900,  94.02200,  94.34700,  94.59150,  95.85200,  96.69800,
             96.38000,  95.74350,  94.11300,  92.76100,  92.27350,  92.72500,  93.97950,  95.13500,  95.20450,  95.23150,
             94.67950,  94.18450,  94.79750,  97.61850, 101.65500, 105.04550, 105.20500, 105.27650, 104.65450, 103.92300,
            103.66800, 104.01700, 106.61400, 110.22400, 113.84100, 116.43500, 117.26200, 114.43700, 112.04900, 109.97700,
            107.95300, 107.62550, 108.34900, 108.75600, 109.10450, 109.19200, 109.20000, 109.15850, 109.45850, 109.56500,
            109.58650, 108.99850
        };

        /// <summary>
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MAMA.xsl, Detrender, F5…F256, 252 entries.
        /// </summary>
        private readonly List<double> detrender = new List<double>
        {
             0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
             0.0000000000000000,  0.0000000000000000,  5.0125014810000000,  5.7351609315000000, 45.3009934669500000, 48.1516787407500000,  5.0383630644480000,  5.7998199011004000, -1.0912953624148800, -0.8213465825579110,
            -0.4034936267523290, -0.1892168327165530, -0.6997808218640380, -1.5378773766084500, -2.1383334977214700, -2.9215801302318800, -3.2342175210338200, -2.4386451139707500, -1.4456147168902400,  0.9456494067882460,
             2.7539474297523800,  2.7187177141344000,  1.6320281615787600,  0.0687629021374653,  0.0640202757533008,  0.5544321466389430,  1.7140422092105000,  1.6356394381921200, -0.7235330018143250, -2.7610170601815500,
            -3.7176821022932400, -2.6954911773330200, -1.2421734089063600,  1.1347148119336800,  4.2705448426004400,  5.1283645881814500,  5.3971891724563100,  4.1279909112130600,  2.7137830380355800,  1.3430498634766300,
            -0.5329123450054050, -0.6051197464615070, -0.9982932851022320, -2.3430544711737800, -3.2089722669835900, -4.0548682092165000, -4.3326497536020500, -2.6750180544941300, -0.1283021027953670,  1.7777016252816900,
             3.1167301465563000,  3.5793393723155300,  3.0118984690869200,  1.5227138408293000,  1.3156774085962300,  2.5133200052920100,  2.3557083002121700,  1.9307221200449200,  1.6014913706806100,  0.0663340285562119,
            -1.2123402394386300, -1.7623717038912900, -3.1220734100928000, -4.1357149373350600, -5.0620543046706300, -4.4875574534296800, -1.6478779909311200,  7.5721739917762400, 15.2276791718279000, 14.8335086561591000,
            12.9549414216510000,  7.1753119634763400,  2.3753467710022300,  0.9258607789814280,  0.5159480636004500,  1.8499800544406100,  1.8342956296416900,  1.0413232435330000,  1.7444726769318000,  3.0958003645873000,
             4.4592235431527400,  4.7074546638408200,  8.2187740970611100, 10.2024918036564000,  6.4505209622339900,  3.8871360894111800,  0.9705299289367800, -1.8310199152323400, -2.9888319668512900, -4.6224068945213800,
            -5.2599380634159300, -2.7227037269325600, -0.0661117293353419,  1.0406366964872600,  0.0801861778671587, -1.9168149139764800, -0.8013303741178800,  0.7796315510142970,  4.2521316118663900,  5.2832063157820100,
             3.1048110917106900,  0.2711379595411030, -2.7929894712218500, -2.2164255269127500, -0.2348422563424850,  3.1902767256010200,  5.2094349276364200,  4.5931720624014800,  5.0754648628423600,  5.5206800446845200,
             3.1828099155084800,  0.7756816897236450,  0.5219011840372040,  0.4255817495460910,  0.7374890702903960,  3.2450973643818400,  5.3152322152261300,  5.6374475809066600,  5.7635650357567300,  4.6384483748047600,
             4.0163610177680100,  5.0483304721535700,  5.4866286424006100,  4.7946723417653400,  3.2335641760756500,  1.0145238674599400, -1.1883639974651400, -2.1779268933060000, -7.3452836216686400,-11.5044023759175000,
           -11.3722905720288000,-11.3356138343161000, -7.7461741562176500, -3.5973932793130000,  0.6309825103035310,  1.7829564162066200, -0.0528472901699963, -1.8884015510323500, -5.0159049428345600, -5.8333531019767300,
            -3.9291815964536600, -0.1868362835685740,  1.9560569768053200,  0.2347213369609160, -0.4130917354045460,  0.3826641723499430,  1.4986163621716800,  4.0215228835475700,  5.3311626094064300,  3.6184862376362000,
            -0.3528939991708090, -3.4609031928271700, -3.1892037676384600, -2.4932377557839900, -1.5994603185452000,  0.3612152893569630,  1.2870082735480900,  1.5555894988829200,  1.5330290235283000,  2.5725483599331900,
             2.6286925751925600,  3.1339613141241000,  4.8586074892542100,  5.1470706520224000,  5.3067937683396500,  5.0438184744267700,  2.9991632953730500,  0.0236318855582428, -1.2870850300974900, -2.7173890234059800,
            -5.0279860233382500, -5.0367686664002500, -3.8860415820015500, -4.0825292695358500, -4.0411047687015800, -4.4003968628322400, -3.6221894254366600, -2.1301806106105500, -2.7285320967158400, -3.0489379789252400,
            -3.8105345365708400, -4.0690238232231900, -1.3727898029383800,  0.2544566666329380, -1.9476772104923800, -6.7871867946521900, -8.1519501735362200, -8.1001981083681600,-11.3315384749647000,-11.5509304677202000,
            -8.9267382287277500, -4.7170924869124000, -3.1812211014013900, -0.6027072957571440,-10.0542646729011000,-16.7522903418775000,-11.3660832664011000, -7.6912863915063100, -1.9202029987563800,  0.7073346660722690,
             3.0397888130392900,  4.4168091809812900,  0.8590144874302390, -2.1694433001088900, -4.9418867441102500, -6.2070048123741900, -3.7013226477034800, -0.2166762859986690,  2.8182555554286100,  4.0301551077996400,
             2.2593929283357700,  0.4638646477022010, -0.5271224926365010, -0.8645862757159350,  1.6398615124211100,  6.8504354869955400, 11.2765593650413000, 11.9177278984162000,  6.8284538039633600,  1.8145566490972000,
            -0.3277033284578440, -2.5114264122836700, -1.2807407535784200,  1.4816607551596500,  6.8349698832421700, 12.2933521686905000, 14.0337650493621000, 11.7623106250503000,  6.3689900372732500, -2.9916106107942000,
            -9.1496657127949000, -8.5317206147924400, -7.6173807066550700, -4.2721957083915200, -0.1206682990645630,  1.2870128527670200,  1.2183925659687400,  0.8386484546943880,  0.3258183566849010,  0.1139699656578760,
             0.3727810916828540,  0.4055960092449530
        };

        /// <summary>
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MAMA.xsl, Q1, G5…G256, 252 entries.
        /// </summary>
        private readonly List<double> quadrature = new List<double>
        {
             0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
             0.0000000000000000,  0.0000000000000000,  0.2603894269349880,  0.3475851634144890,  5.0892667084884600,  6.0318361132098000, 19.1164672932194000, 21.0872180237552000,-20.7854292072645000,-22.7095131590961000,
            -7.4783017780199400, -8.3257686836246800, -0.1594462948027110, -0.3671343694799350, -0.3068519746226910, -1.1648600444261600, -1.3814995643694200, -1.3441325168042100, -0.9877985984458350,  0.7708533255196850,
             2.3806291596799600,  4.2138248069852300,  5.2145376565819700,  2.4129362857283400, -0.9961113937159570, -3.2021601136789100, -2.0870464152614100,  0.3652193237369600,  1.4960061318638600,  0.7257655104957260,
            -3.6842465098133700, -5.9336304872513400, -4.1702111961534900, -0.0219283638015621,  4.2932722075889800,  6.9046840670028400,  9.0821581550802100,  6.2950709952836300,  2.0923512443712400, -1.1209645937984700,
            -3.9773748465646000, -4.1043075135416000, -4.5404643628864000, -3.0900648641385800, -1.4620542342143900, -2.6563521219908700, -2.8656864779298400, -2.0617595702461100, -0.9815030526714510,  2.0966123087089100,
             5.3868807979846900,  5.8747147950580800,  4.5668791916616700,  2.5486561781880300,  0.1385770681905590, -1.9667815594382300, -1.8379999279146500,  0.7132094988005560,  0.7986172658222790, -0.8251048108903810,
            -1.1962028935912300, -2.6987537958353500, -4.0055694942488200, -3.0943796458390900, -3.3451426388960100, -3.5540612906376000, -2.3056082002674500,  1.3890929922203700,  7.5263594783999100, 17.3882326685195000,
            21.6177306261650000,  9.5394666584917000, -1.6794391832032200, -9.7744419794990700,-14.3163626207551000, -8.8334974643940000, -3.7872869561441100, -0.1005934072656200,  1.2560822875570500, -0.4723370846899530,
             0.6105454960821830,  2.7613476646471800,  4.1917705481392500,  3.5441196394147500,  5.2256465319378800,  6.6234241822472100, -2.8466892499560800, -9.0985687356379800, -9.1196472744186500,-10.2252150742754000,
            -7.3213607910939800, -4.8171600955700900, -3.0533068242013300,  2.9744614031976200,  7.0518622223828800,  5.1325164881759100,  1.0626988937679500, -2.7816236993031900, -0.1879557754255160,  3.9540805333859300,
             6.4065491791620600,  5.5698110957845200, -1.6970280634564800, -6.4178293531488400, -7.8591016835507700, -3.3112710565198800,  3.3238177697126900,  7.0671833087656100,  8.0254412163068200,  3.2940806062908500,
             0.5512335420466500,  0.6809444209631550, -3.3337913903180700, -6.4457024355386300, -3.8148948688233800, -0.7993363150158590,  0.6288354497938020,  4.0790843805969200,  6.3327920730776000,  3.7865433442296200,
             1.2941048991923800, -0.9771917711863080, -2.4725165349640900,  0.3762220750123770,  1.4518683293368400, -1.2205745771905500, -4.6048239642493500, -7.6080821946923800,-10.2268312873527000, -9.2955017946500100,
           -13.7973025222110000,-18.5835274667597000, -8.2044709913377300, -0.1090358408606340,  8.4550973939268800, 16.5605206650611000, 16.1615000724753000, 10.3717716134352000, -0.3232950833081980, -5.6051813784117400,
            -7.9095781942393000, -5.8737143454328500,  1.9332625086999800,  8.0736393406779800,  8.8859408562101700,  1.9411300560282200, -1.9647497357145600,  1.1650288076657500,  3.3876768424199000,  5.6176284892816500,
             5.0662729970956600, -1.3935102383069800, -8.8798445857740600,-11.4707826805785000, -5.5310329225273400,  0.5755892523591610,  2.5284417033229800,  4.9314011891060800,  4.6983947644397300,  2.4792598184236300,
             1.1089608900362000,  1.6724509186388600,  1.8568100190699700,  1.2354476735179000,  2.9751315412651100,  2.5101688597036500,  0.5332069648990600, -0.6705215864476330, -3.7928749650906400, -7.4267727714180300,
            -7.0562536440801600, -5.2066084960979000, -5.8773596327230800, -3.6461813751652200,  0.8220186186756350,  0.8080548216449770,  0.0952295984860339,  0.1980063829102640,  0.7221528351105390,  2.9184405413781600,
             1.1352989368373200, -1.0847952100720000, -0.9303107610384470, -0.8586038605430000,  3.7481168970631600,  5.6402215298442800, -2.0293974162664900,-13.0176921049210000,-14.3548884436867000, -5.6616655295461100,
            -7.0882449194001200, -4.7974950788131000,  4.9572074207363700, 11.7410857274465000,  8.2053241574000300,  4.2544548478170500, -9.3701448182852100,-22.6230107335446000, -1.6125011118156600, 14.6531429023051000,
            19.8379578756550000, 22.0117286532696000, 12.2947246500138000,  7.9739242386963700, -4.6328570969540700,-13.1789753555227000,-11.4437775497932000, -7.5817494121723800,  2.3394875685658400, 10.0314324586050000,
            10.7264549081761000,  7.3142840419047300, -0.0400896341129938, -5.0196506109747200, -4.0981570788370100, -1.1594020457943700,  4.8059516955127200, 12.3652723499677000, 14.2825881330399000,  7.8028396216808000,
            -7.2858090153080500,-19.2091159830650000,-15.7635591806771000, -9.7801733782902300, -1.4530438635561600,  8.5090989416203100, 15.5366301629935000, 19.5213793161239000, 12.4727657400984000, -1.8733977623213300,
           -15.2576060150208000,-26.2276373998654000,-26.1028651935759000,-10.6375619556038000,  0.5716986935845820,  6.4028843828159500, 11.6669551210534000,  8.6355695117044600,  3.0938154807009000,  0.3181197742676490,
            -0.8913630344457770, -0.9447073437090450
        };

        /// <summary>
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MAMA.xsl, I1, H5…H256, 252 entries.
        /// </summary>
        private readonly List<double> inPhase = new List<double>
        {
             0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
             0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  5.0125014810000000,  5.7351609315000000, 45.3009934669500000, 48.1516787407500000,  5.0383630644480000,
             5.7998199011004000, -1.0912953624148800, -0.8213465825579110, -0.4034936267523290, -0.1892168327165530, -0.6997808218640380, -1.5378773766084500, -2.1383334977214700, -2.9215801302318800, -3.2342175210338200,
            -2.4386451139707500, -1.4456147168902400,  0.9456494067882460,  2.7539474297523800,  2.7187177141344000,  1.6320281615787600,  0.0687629021374653,  0.0640202757533008,  0.5544321466389430,  1.7140422092105000,
             1.6356394381921200, -0.7235330018143250, -2.7610170601815500, -3.7176821022932400, -2.6954911773330200, -1.2421734089063600,  1.1347148119336800,  4.2705448426004400,  5.1283645881814500,  5.3971891724563100,
             4.1279909112130600,  2.7137830380355800,  1.3430498634766300, -0.5329123450054050, -0.6051197464615070, -0.9982932851022320, -2.3430544711737800, -3.2089722669835900, -4.0548682092165000, -4.3326497536020500,
            -2.6750180544941300, -0.1283021027953670,  1.7777016252816900,  3.1167301465563000,  3.5793393723155300,  3.0118984690869200,  1.5227138408293000,  1.3156774085962300,  2.5133200052920100,  2.3557083002121700,
             1.9307221200449200,  1.6014913706806100,  0.0663340285562119, -1.2123402394386300, -1.7623717038912900, -3.1220734100928000, -4.1357149373350600, -5.0620543046706300, -4.4875574534296800, -1.6478779909311200,
             7.5721739917762400, 15.2276791718279000, 14.8335086561591000, 12.9549414216510000,  7.1753119634763400,  2.3753467710022300,  0.9258607789814280,  0.5159480636004500,  1.8499800544406100,  1.8342956296416900,
             1.0413232435330000,  1.7444726769318000,  3.0958003645873000,  4.4592235431527400,  4.7074546638408200,  8.2187740970611100, 10.2024918036564000,  6.4505209622339900,  3.8871360894111800,  0.9705299289367800,
            -1.8310199152323400, -2.9888319668512900, -4.6224068945213800, -5.2599380634159300, -2.7227037269325600, -0.0661117293353419,  1.0406366964872600,  0.0801861778671587, -1.9168149139764800, -0.8013303741178800,
             0.7796315510142970,  4.2521316118663900,  5.2832063157820100,  3.1048110917106900,  0.2711379595411030, -2.7929894712218500, -2.2164255269127500, -0.2348422563424850,  3.1902767256010200,  5.2094349276364200,
             4.5931720624014800,  5.0754648628423600,  5.5206800446845200,  3.1828099155084800,  0.7756816897236450,  0.5219011840372040,  0.4255817495460910,  0.7374890702903960,  3.2450973643818400,  5.3152322152261300,
             5.6374475809066600,  5.7635650357567300,  4.6384483748047600,  4.0163610177680100,  5.0483304721535700,  5.4866286424006100,  4.7946723417653400,  3.2335641760756500,  1.0145238674599400, -1.1883639974651400,
            -2.1779268933060000, -7.3452836216686400,-11.5044023759175000,-11.3722905720288000,-11.3356138343161000, -7.7461741562176500, -3.5973932793130000,  0.6309825103035310,  1.7829564162066200, -0.0528472901699963,
            -1.8884015510323500, -5.0159049428345600, -5.8333531019767300, -3.9291815964536600, -0.1868362835685740,  1.9560569768053200,  0.2347213369609160, -0.4130917354045460,  0.3826641723499430,  1.4986163621716800,
             4.0215228835475700,  5.3311626094064300,  3.6184862376362000, -0.3528939991708090, -3.4609031928271700, -3.1892037676384600, -2.4932377557839900, -1.5994603185452000,  0.3612152893569630,  1.2870082735480900,
             1.5555894988829200,  1.5330290235283000,  2.5725483599331900,  2.6286925751925600,  3.1339613141241000,  4.8586074892542100,  5.1470706520224000,  5.3067937683396500,  5.0438184744267700,  2.9991632953730500,
             0.0236318855582428, -1.2870850300974900, -2.7173890234059800, -5.0279860233382500, -5.0367686664002500, -3.8860415820015500, -4.0825292695358500, -4.0411047687015800, -4.4003968628322400, -3.6221894254366600,
            -2.1301806106105500, -2.7285320967158400, -3.0489379789252400, -3.8105345365708400, -4.0690238232231900, -1.3727898029383800,  0.2544566666329380, -1.9476772104923800, -6.7871867946521900, -8.1519501735362200,
            -8.1001981083681600,-11.3315384749647000,-11.5509304677202000, -8.9267382287277500, -4.7170924869124000, -3.1812211014013900, -0.6027072957571440,-10.0542646729011000,-16.7522903418775000,-11.3660832664011000,
            -7.6912863915063100, -1.9202029987563800,  0.7073346660722690,  3.0397888130392900,  4.4168091809812900,  0.8590144874302390, -2.1694433001088900, -4.9418867441102500, -6.2070048123741900, -3.7013226477034800,
            -0.2166762859986690,  2.8182555554286100,  4.0301551077996400,  2.2593929283357700,  0.4638646477022010, -0.5271224926365010, -0.8645862757159350,  1.6398615124211100,  6.8504354869955400, 11.2765593650413000,
            11.9177278984162000,  6.8284538039633600,  1.8145566490972000, -0.3277033284578440, -2.5114264122836700, -1.2807407535784200,  1.4816607551596500,  6.8349698832421700, 12.2933521686905000, 14.0337650493621000,
            11.7623106250503000,  6.3689900372732500, -2.9916106107942000, -9.1496657127949000, -8.5317206147924400, -7.6173807066550700, -4.2721957083915200, -0.1206682990645630,  1.2870128527670200,  1.2183925659687400,
             0.8386484546943880,  0.3258183566849010
        };

        /// <summary>
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MAMA.xsl, Period Adjustment, X5…X256, 252 entries.
        /// </summary>
        private readonly List<double> period = new List<double>
        {
             0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,
             0.00000000000000,  0.00000000000000,  1.20000000000000,  2.16000000000000,  2.92800000000000,  3.54240000000000,  4.03392000000000,  4.43731200000000,  4.88104320000000,  5.36914752000000,
             5.90606227200000,  6.49666849920000,  7.14633534912000,  7.86096888403201,  8.64706577243521,  9.51177234967873, 10.46294958464660, 11.50924454311130, 12.66016899742240, 13.92618589716460,
            15.31880448688110, 16.85068493556920, 18.25098629974640, 19.25670241718160, 20.05716985935430, 20.49924214619500, 20.46963087639870, 20.30165452353670, 20.32837073638190, 20.55269067851620,
            20.56869954670240, 20.43954309126920, 20.94829032351610, 22.79323666006770, 23.81203238266230, 22.64750549668520, 21.15277013390400, 19.87167735278480, 19.62983140200320, 19.18194945196090,
            18.15643607923850, 17.13002501021100, 16.39169931486150, 16.05573357901780, 16.07233185269560, 16.08583390885280, 15.96578133217800, 15.98051410626630, 16.24314401499140, 16.47323220652620,
            16.51333620954020, 16.41421426308240, 16.34656133637730, 16.35748234007810, 16.30428947745260, 16.10062021127120, 15.83181162503320, 15.73331877966350, 15.90225638402400, 16.31363752015450,
            17.00048272686260, 17.63771366260350, 17.97948909395720, 18.39270865723370, 19.02053532177490, 19.27673649950780, 19.44906095934900, 19.66869147943570, 19.19951093732620, 17.93234321546270,
            16.74880856324210, 17.03149451812860, 18.56940254756530, 18.18822434183390, 17.06289841352590, 16.36934364340980, 16.34495308733490, 16.73000486624560, 17.23235183061780, 17.65497446394480,
            18.01576775537770, 18.43389993539970, 18.89230257890150, 19.37732406011650, 20.00471852304940, 20.79687619989010, 21.19533715148140, 21.48098706479820, 21.65447003771330, 21.42112927262200,
            21.39420089518780, 21.67439245462840, 21.70228321443090, 21.36544859347230, 20.94633032264000, 20.40342962516460, 19.88700378526300, 19.70890329159230, 19.64761760312970, 19.44141191780140,
            19.24175882232220, 19.31129519006940, 19.71182109785850, 20.13062506740660, 19.77987692979730, 19.20685699084020, 19.45674990539570, 20.25325262866260, 21.06979111119460, 22.02484763132590,
            22.78480680028800, 21.61136001012280, 20.18501024945470, 18.85279957299070, 18.12247577465280, 18.24514581403830, 18.76967950529350, 19.64682101344890, 21.07744410365620, 22.85680733176480,
            25.14248806494130, 26.05039121753090, 25.08279385411640, 24.80708067576130, 25.68029173353210, 26.90057276264520, 28.07240526594420, 28.82163522833700, 29.14929038989770, 29.91189361467710,
            30.52236423826030, 29.83161959977090, 29.90731927161950, 32.22841031950080, 31.25187451176630, 29.18925079398980, 27.26276024158640, 25.49334102341790, 24.83273226367310, 24.73973688716750,
            24.56693642381910, 24.22798455270090, 23.89683201979140, 23.67016200373910, 23.56845912334390, 23.81636684145510, 24.48902306877310, 24.44095014653390, 23.69016064725570, 23.27216899179900,
            23.65053514118590, 24.54121611389790, 25.26648728831610, 24.82228779586860, 24.13779495039640, 24.16397182666170, 23.67934110558480, 22.35686719678200, 20.90084523714290, 19.74869094423920,
            18.92933873113530, 18.17467681690930, 17.40880963460840, 16.84913237141170, 16.72176610609070, 16.96545137238030, 17.71858799774280, 19.10532708939810, 19.90966033244590, 19.93727804876500,
            20.01291865494290, 20.58418065688370, 20.85192698804570, 20.62840941264890, 20.52566419160080, 20.53441191305020, 20.23345839110020, 20.07487673498480, 20.41479617948210, 20.95031586915570,
            21.83512573681200, 23.21610676288730, 24.68113723319900, 26.53369657611880, 28.03052657281760, 28.91203832150460, 31.80324215365500, 34.98356636902050, 32.67465098866520, 30.51812402341330,
            28.50392783786800, 28.23051418762200, 26.36730025123890, 24.62705843465720, 23.08268185119710, 22.54844759563280, 24.21164753084610, 26.63281228393070, 29.29609351232380, 32.22570286355620,
            35.44827314991180, 33.40203854860980, 32.60200028595780, 32.68406355536610, 32.15695005225470, 30.99333414107640, 29.22868766272510, 27.29959427698530, 25.80718378456020, 24.91099245094070,
            24.34338827086350, 24.15102009948070, 24.37427140704240, 24.55200350852680, 24.02511985978270, 23.06059004141070, 22.49214147860150, 23.18678454942420, 25.50546300436660, 28.05600930480320,
            30.86161023528360, 32.18625586815590, 30.06196298085760, 28.07787342412100, 27.05902341321890, 26.96412234298660, 27.00123993390700, 26.81663283103030, 26.70673562229350, 26.93603500931230,
            26.05771308017850, 24.33790401688670, 22.73160235177220, 22.15513021145120, 22.55743058290580, 22.02806932434090, 20.82480030457300, 19.64485245153280, 18.77621596206160, 18.22449901812480,
            17.84894987188080, 17.53809422438420
        };
        #endregion

        #region UpdateTest
        /// <summary>
        /// A test for Update (SmoothedValue).
        /// </summary>
        [TestMethod]
        public void UpdateTestSmoothedValue()
        {
            var target = new HilbertTransformerDualDifferentiator();
            for (int i = 0; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.SmoothedValue, 5);
                if (i >= 3)
                    Assert.AreEqual(smoothedInput[i], d, "i=" + i);
            }
        }

        /// <summary>
        /// A test for Update (DetrendedValue).
        /// </summary>
        [TestMethod]
        public void TestDetrendedValue()
        {
            const int digits = 9;
            var target = new HilbertTransformerDualDifferentiator();
            // Tradestation implementation skips first 9 bars.
            for (int i = 0; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.DetrendedValue, digits);
                double u = Math.Round(detrender[i], digits);
                if (i >= 912) // 7+4=11
                    Assert.AreEqual(u, d, "i="+i);
            }
        }

        /// <summary>
        /// A test for Update (Quadrature).
        /// </summary>
        [TestMethod]
        public void UpdateTestQuadrature()
        {
            const int digits = 10;
            var target = new HilbertTransformerDualDifferentiator();
            // Tradestation-implementation skips first 9 bars.
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.Quadrature, digits);
                double u = Math.Round(quadrature[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        /// <summary>
        /// A test for Update (InPhase).
        /// </summary>
        [TestMethod]
        public void UpdateTestInPhase()
        {
            const int digits = 9;
            var target = new HilbertTransformerDualDifferentiator();
            // Tradestation-implementation skips first 9 bars.
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.InPhase, digits);
                double u = Math.Round(inPhase[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        /// <summary>
        /// A test for Update (period).
        /// </summary>
        [TestMethod]
        public void UpdateTestPeriod()
        {
            const int digits = 9;
            var target = new HilbertTransformerDualDifferentiator();
            // Tradestation-implementation skips first 9 bars.
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.Period, digits);
                double u = Math.Round(period[i], digits);
                Assert.AreEqual(u, d);
            }
        }
        #endregion

        #region ConstructorTest
        /// <summary>
        /// A test for a maximal period of 50.
        /// </summary>
        [TestMethod]
        public void MaximalPriodTest()
        {
            var target = new HilbertTransformerDualDifferentiator();
            Assert.AreEqual(4, target.SmoothingLength);
            for (int i = 0; i < 512; ++i)
                target.Update(Math.Sin(i * Math.PI * 2 / 100));
            Assert.AreEqual(50d, target.Period);
        }
        #endregion

        #region ResetTest
        /// <summary>
        /// A test for Reset.
        /// </summary>
        [TestMethod]
        public void ResetTest()
        {
            double d, u; const int digits = 9;
            var target = new HilbertTransformerDualDifferentiator();
            // Tradestation-implementation skips first 9 bars.
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                d = Math.Round(target.DetrendedValue, digits);
                u = Math.Round(detrender[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(target.Quadrature, digits);
                u = Math.Round(quadrature[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(target.InPhase, digits);
                u = Math.Round(inPhase[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(target.Period, digits);
                u = Math.Round(period[i], digits);
                Assert.AreEqual(u, d);
            }
            target.Reset();
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                d = Math.Round(target.DetrendedValue, digits);
                u = Math.Round(detrender[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(target.Quadrature, digits);
                u = Math.Round(quadrature[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(target.InPhase, digits);
                u = Math.Round(inPhase[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(target.Period, digits);
                u = Math.Round(period[i], digits);
                Assert.AreEqual(u, d);
            }
        }
        #endregion

        #region ConstructorTest
        /// <summary>
        /// A test for Constructor.
        /// </summary>
        [TestMethod]
        public void EhlersHilbertTransformDualDifferentiatorConstructorTest()
        {
            var target = new HilbertTransformerDualDifferentiator();
            Assert.AreEqual(4, target.SmoothingLength);
            foreach (double t in rawInput)
                target.Update(t);

            target = new HilbertTransformerDualDifferentiator(3);
            Assert.AreEqual(3, target.SmoothingLength);
            foreach (double t in rawInput)
                target.Update(t);

            target = new HilbertTransformerDualDifferentiator(2);
            Assert.AreEqual(2, target.SmoothingLength);
            foreach (double t in rawInput)
                target.Update(t);
        }

        /// <summary>
        /// A test for constructor exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void EhlersHilbertTransformDualDifferentiatorConstructorTest2()
        {
            var target = new HilbertTransformerDualDifferentiator(5);
            Assert.AreEqual(5, target.SmoothingLength);
        }

        /// <summary>
        /// A test for constructor exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void EhlersHilbertTransformDualDifferentiatorConstructorTest3()
        {
            var target = new HilbertTransformerDualDifferentiator(1);
            Assert.AreEqual(1, target.SmoothingLength);
        }

        /// <summary>
        /// A test for constructor exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void EhlersHilbertTransformDualDifferentiatorConstructorTest4()
        {
            var target = new HilbertTransformerDualDifferentiator(0);
            Assert.AreEqual(0, target.SmoothingLength);
        }

        /// <summary>
        /// A test for constructor exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void EhlersHilbertTransformDualDifferentiatorConstructorTest5()
        {
            var target = new HilbertTransformerDualDifferentiator(-8);
            Assert.AreEqual(-8, target.SmoothingLength);
        }
        #endregion

        #region SerializationTest
        private static void SerializeTo(HilbertTransformerDualDifferentiator instance, string fileName)
        {
            var dcs = new DataContractSerializer(typeof(HilbertTransformerDualDifferentiator), null, 65536, false, true, null);
            using (var fs = new FileStream(fileName, FileMode.Create))
            {
                dcs.WriteObject(fs, instance);
                fs.Close();
            }
        }

        private static HilbertTransformerDualDifferentiator DeserializeFrom(string fileName)
        {
            var fs = new FileStream(fileName, FileMode.Open);
            XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(fs, new XmlDictionaryReaderQuotas());
            var ser = new DataContractSerializer(typeof(HilbertTransformerDualDifferentiator), null, 65536, false, true, null);
            var instance = (HilbertTransformerDualDifferentiator)ser.ReadObject(reader, true);
            reader.Close();
            fs.Close();
            return instance;
        }

        /// <summary>
        ///A test for the serialization
        ///</summary>
        [TestMethod]
        public void SerializationTest()
        {
            double d, u; const int digits = 9;
            var source = new HilbertTransformerDualDifferentiator();
            // Tradestation-implementation skips first 9 bars.
            for (int i = 9; i < 111; ++i)
            {
                source.Update(rawInput[i]);
                d = Math.Round(source.DetrendedValue, digits);
                u = Math.Round(detrender[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(source.Quadrature, digits);
                u = Math.Round(quadrature[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(source.InPhase, digits);
                u = Math.Round(inPhase[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(source.Period, digits);
                u = Math.Round(period[i], digits);
                Assert.AreEqual(u, d);
            }
            const string fileName = "EhlersHilbertTransformDualDifferentiator_1.xml";
            SerializeTo(source, fileName);
            HilbertTransformerDualDifferentiator target = DeserializeFrom(fileName);
            Assert.AreEqual(source.Count, target.Count);
            Assert.AreEqual(source.SmoothedValue, target.SmoothedValue);
            Assert.AreEqual(source.DetrendedValue, target.DetrendedValue);
            Assert.AreEqual(source.Quadrature, target.Quadrature);
            Assert.AreEqual(source.InPhase, target.InPhase);
            for (int i = 111; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                d = Math.Round(target.DetrendedValue, digits);
                u = Math.Round(detrender[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(target.Quadrature, digits);
                u = Math.Round(quadrature[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(target.InPhase, digits);
                u = Math.Round(inPhase[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(target.Period, digits);
                u = Math.Round(period[i], digits);
                Assert.AreEqual(u, d);
            }
            //FileInfo fi = new FileInfo(fileName);
            //fi.Delete();
        }
        #endregion
    }
}
