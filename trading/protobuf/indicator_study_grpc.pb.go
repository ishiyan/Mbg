// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: trading/protobuf/indicator_study.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndicatorStudyServiceClient is the client API for IndicatorStudyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndicatorStudyServiceClient interface {
	Metadata(ctx context.Context, in *IndicatorStudyRequest, opts ...grpc.CallOption) (*IndicatorStudyReply, error)
	Data(ctx context.Context, in *IndicatorStudyRequest, opts ...grpc.CallOption) (*IndicatorStudyReply, error)
}

type indicatorStudyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndicatorStudyServiceClient(cc grpc.ClientConnInterface) IndicatorStudyServiceClient {
	return &indicatorStudyServiceClient{cc}
}

func (c *indicatorStudyServiceClient) Metadata(ctx context.Context, in *IndicatorStudyRequest, opts ...grpc.CallOption) (*IndicatorStudyReply, error) {
	out := new(IndicatorStudyReply)
	err := c.cc.Invoke(ctx, "/mbg.trading.protobuf.IndicatorStudyService/Metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicatorStudyServiceClient) Data(ctx context.Context, in *IndicatorStudyRequest, opts ...grpc.CallOption) (*IndicatorStudyReply, error) {
	out := new(IndicatorStudyReply)
	err := c.cc.Invoke(ctx, "/mbg.trading.protobuf.IndicatorStudyService/Data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndicatorStudyServiceServer is the server API for IndicatorStudyService service.
// All implementations must embed UnimplementedIndicatorStudyServiceServer
// for forward compatibility
type IndicatorStudyServiceServer interface {
	Metadata(context.Context, *IndicatorStudyRequest) (*IndicatorStudyReply, error)
	Data(context.Context, *IndicatorStudyRequest) (*IndicatorStudyReply, error)
	mustEmbedUnimplementedIndicatorStudyServiceServer()
}

// UnimplementedIndicatorStudyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndicatorStudyServiceServer struct {
}

func (UnimplementedIndicatorStudyServiceServer) Metadata(context.Context, *IndicatorStudyRequest) (*IndicatorStudyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedIndicatorStudyServiceServer) Data(context.Context, *IndicatorStudyRequest) (*IndicatorStudyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Data not implemented")
}
func (UnimplementedIndicatorStudyServiceServer) mustEmbedUnimplementedIndicatorStudyServiceServer() {}

// UnsafeIndicatorStudyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndicatorStudyServiceServer will
// result in compilation errors.
type UnsafeIndicatorStudyServiceServer interface {
	mustEmbedUnimplementedIndicatorStudyServiceServer()
}

func RegisterIndicatorStudyServiceServer(s grpc.ServiceRegistrar, srv IndicatorStudyServiceServer) {
	s.RegisterService(&IndicatorStudyService_ServiceDesc, srv)
}

func _IndicatorStudyService_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndicatorStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicatorStudyServiceServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mbg.trading.protobuf.IndicatorStudyService/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicatorStudyServiceServer).Metadata(ctx, req.(*IndicatorStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicatorStudyService_Data_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndicatorStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicatorStudyServiceServer).Data(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mbg.trading.protobuf.IndicatorStudyService/Data",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicatorStudyServiceServer).Data(ctx, req.(*IndicatorStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndicatorStudyService_ServiceDesc is the grpc.ServiceDesc for IndicatorStudyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndicatorStudyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mbg.trading.protobuf.IndicatorStudyService",
	HandlerType: (*IndicatorStudyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metadata",
			Handler:    _IndicatorStudyService_Metadata_Handler,
		},
		{
			MethodName: "Data",
			Handler:    _IndicatorStudyService_Data_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trading/protobuf/indicator_study.proto",
}
