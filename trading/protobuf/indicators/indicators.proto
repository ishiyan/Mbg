syntax = "proto3";

import "trading/protobuf/data/entities/entities.proto";

package mbg.trading.protobuf.indicators;

option go_package="mbg/trading/protobuf/indicators";

// Components to use when calculating indicator from a Bar, Quote or Trade entities.
message Components {
	// The Bar component to use when calculating indicator from a Bar data.
	mbg.trading.protobuf.data.entities.Bar.Component bar = 1;
	// The Quote component to use when calculating indicator from a Quote data.
	mbg.trading.protobuf.data.entities.Quote.Component quote = 2;
	// The Trade component to use when calculating indicator from a Trade data.
	mbg.trading.protobuf.data.entities.Trade.Component trade = 3;
}

// ==========================================================================================================
// SimpleMovingAverage
// ==========================================================================================================

// A simple, or arithmetic, moving average (SMA) is calculated by adding the samples
// for a number of time periods (length, ℓ) and then dividing this total by the number of time periods.
//
// In other words, this is an unweighted mean (gives equal weight to each sample) of the previous ℓ samples.
//
// This implementation updates the value of the SMA incrementally using the formula
//
// SMAᵢ = SMAᵢ₋₁ + (Pᵢ - Pᵢ₋ℓ) / ℓ, where ℓ is the length.
//
// The indicator is not primed during the first ℓ-1 updates.
message SimpleMovingAverage {

	// The parameters to create the indicator.
	message Params {
		// The length (the number of time periods) of the simple moving average, should be greater than 1.
		uint32 length = 1;
		// Components to use when calculating indicator from a Bar, Quote or Trade entities.
		Components components = 2;
	}

	// Possible output kinds of the indicator.
	enum OutputKind {
		// The Scalar value of the the simple moving average.
		VALUE = 0;
	}

	// Parameters to create the indicator.
	Params params = 1;
	// Output kinds of the indicator.
	repeated OutputKind outputs = 2;
}

// ==========================================================================================================
// ExponentialMovingAverage
// ==========================================================================================================

// Given a constant smoothing percentage factor 0 < α ≤ 1, an exponential, or exponentially weighted, moving average (EMA)
// is calculated by applying a constant smoothing factor α to a difference of today's sample and yesterday's EMA value
//
// EMAᵢ = αPᵢ + (1-α)EMAᵢ₋₁ = EMAᵢ₋₁ + α(Pᵢ - EMAᵢ₋₁), 0 < α ≤ 1
//
// Thus, the weighting for each older sample is given by the geometric progression 1, α, α², α³, …, giving much
// more importance to recent observations while not discarding older ones: all data previously used are always part of the new EMA value.
//
// α may be expressed as a percentage, so a smoothing factor of 10% is equivalent to α = 0.1. A higher α
// discounts older observations faster. Alternatively, α may be expressed in terms of ℓ time periods (length), where
// α = 2 / (ℓ + 1) and ℓ = 2/α - 1.
//
// The indicator is not primed during the first ℓ-1 updates.
//
// The 12- and 26-day EMAs are the most popular short-term averages, and they are used to create indicators like MACD and PPO.
// In general, the 50- and 200-day EMAs are used as signals of long-term trends.
//
// The very first EMA value (the seed for subsequent values) is calculated differently. This implementation allows for two algorithms for this seed.
//
// ❶ Use a simple average of the first 'period'. This is the most widely documented approach.
//
// ❷ Use first sample value as a seed. This is used in Metastock.
message ExponentialMovingAverage {

	// The parameters to create the indicator based on length.
	message LengthParams {
		// The length (the number of time periods) of the exponential moving average, should be greater than 1.
		uint32 length = 1;
		// If the very first exponential moving average value is a simple average of the first 'period' (the most widely documented approach) or the first input value (used in Metastock).
		bool first_is_average = 2;
		// Components to use when calculating indicator from a Bar, Quote or Trade entities.
		Components components = 3;
	}

	// The parameters to create the indicator based on smoothing factor.
	message SmoothingFactorParams {
        // The smoothing factor, α, of the exponential moving average.
		// The equivalent length ℓ = 2/α - 1, 0 < α ≤ 1, 1 ≤ ℓ.
    	double smoothing_factor = 1;
		// If the very first exponential moving average value is a simple average of the first 'period' (the most widely documented approach) or the first input value (used in Metastock).
		bool first_is_average = 2;
		// Components to use when calculating indicator from a Bar, Quote or Trade entities.
		Components components = 3;
	}

	// Possible output kinds of the indicator.
	enum OutputKind {
		// The Scalar value of the the exponential moving average.
		VALUE = 0;
	}

	// Parameters to create the indicator.
	oneof params {
		// Parameters to create the indicator based on length.
		LengthParams length_params = 1;
		// Parameters to create the indicator based on smoothing factor.
		SmoothingFactorParams smoothing_factor_params = 2;
	}
	// Output kinds of the indicator.
	repeated OutputKind outputs = 3;
}

// ==========================================================================================================
// StandardDeviation
// ==========================================================================================================

// Computes the standard deviation of the samples within a moving window of length ℓ as a square root of variance:
//
// σ² = (∑xᵢ² - (∑xᵢ)²/ℓ)/ℓ
//
// for the estimation of the population variance, or as
//
// σ² = (∑xᵢ² - (∑xᵢ)²/ℓ)/(ℓ-1)
//
// for the unbiased estimation of the sample variance, i={0,…,ℓ-1}.
message StandardDeviation {

	// The parameters to create the indicator.
	message Params {
		// The length (the number of time periods, ℓ) of the moving window to calculate the standard deviation, should be greater than 1.
		uint32 length = 1;
		// If the estimate of the standard deviation is based on the unbiased sample variance or on the population variance.
		bool is_unbiased = 2;
		// Components to use when calculating indicator from a Bar, Quote or Trade entities.
		Components components = 3;
	}

	// Possible output kinds of the indicator.
	enum OutputKind {
		// The Scalar value of the the standard deviation.
		VALUE = 0;
	}

	// Parameters to create the indicator.
	Params params = 1;
	// Output kinds of the indicator.
	repeated OutputKind outputs = 2;
}

// ==========================================================================================================
// Variance
// ==========================================================================================================

// Computes the variance of the samples within a moving window of length ℓ:
//
// σ² = (∑xᵢ² - (∑xᵢ)²/ℓ)/ℓ
//
// for the estimation of the population variance, or as
//
// σ² = (∑xᵢ² - (∑xᵢ)²/ℓ)/(ℓ-1)
//
// for the unbiased estimation of the sample variance, i={0,…,ℓ-1}.
message Variance {

	// The parameters to create the indicator.
	message Params {
		// The length (the number of time periods, ℓ) of the moving window to calculate the variance, should be greater than 1.
		uint32 length = 1;
		// If the estimate of the variance is the unbiased sample variance or the population variance.
		bool is_unbiased = 2;
		// Components to use when calculating indicator from a Bar, Quote or Trade entities.
		Components components = 3;
	}

	// Possible output kinds of the indicator.
	enum OutputKind {
		// The Scalar value of the the variance.
		VALUE = 0;
	}

	// Parameters to create the indicator.
	Params params = 1;
	// Output kinds of the indicator.
	repeated OutputKind outputs = 2;
}

// ==========================================================================================================
// BollingerBands
// ==========================================================================================================

// Bollinger Bands are a type of price envelope invented by John Bollinger in the 1980s. Bollinger bands consist of:
//
// ❶ a middle band being an ℓ-period moving average (MA)
//
// ❷ an upper band at K times an ℓ-period standard deviation σ above the middle band (MA + Kσ)
//
// ❸ a lower band at K times an ℓ-period standard deviation σ below the middle band (MA - Kσ)
//
// Typical values for ℓ and K are 20 and 2, respectively. The default choice for the average is a simple moving average, but other types of averages can be employed as needed.
//
// Exponential moving averages are a common second choice. Usually the same period is used for both the middle band and the calculation of standard deviation.
message BollingerBands {

	// The parameters to create the indicator.
	message Params {
		// The length (the number of time periods) to calculate the standard deviation.
		// Typically this should be equal to the length of the moving average.
		uint32 standard_deviation_length = 1;
		// If the estimate of the standard deviation is based on the unbiased sample variance or on the population variance.
		bool standard_deviation_is_unbiased = 2;
		// Components to use when calculating standard deviation from a Bar, Quote or Trade entities.
		Components standard_deviation_components = 3;
		// The multiplier to multiply the standard deviation.
		double multiplier = 4;
		// The parameters to create a middle moving average.
		// Typically the length of the moving average should be equal to the length used to calculate the standard deviation.
		double moving_average_params = 5;
		// Components to use when calculating %B value from a Bar, Quote or Trade entities.
		Components percent_b_components = 6;
	}

    // Possible output kinds of the indicator.
	enum OutputKind {
		// The Scalar value of the middle moving average.
		MIDDLE_MOVING_AVERAGE_VALUE = 0;
		// The Scalar value of the standard deviation.
		STANDARD_DEVIATION_VALUE = 1;
		// The Scalar value of the the lower Bollinger band.
		LOWER_BAND_VALUE = 2;
		// The Scalar value of the the upper Bollinger band.
		UPPER_BAND_VALUE = 3;
		// The Scalar value of the the %B.
		// It measures the price (an input to the moving average) relative to the upper and lower band.
		// %B = (Price - LowerBand) / (UpperBand - LowerBand)
		PERCENT_BAND_VALUE = 4;
		// The Scalar value of the the Bollinger BandWidth.
		// It measures the percentage difference between the upper band and the lower band.
		// BandWidth = (UpperBand - LowerBand) / MiddleMovingAverage
		BAND_WIDTH_VALUE = 5;
		// The Band containing the lower and the upper band values.
		LOWER_UPPER_BAND = 6;
	}

	// Parameters to create the indicator.
	Params params = 1;
	// Output kinds of the indicator.
	repeated OutputKind outputs = 2;
}

// ==========================================================================================================
// GoertzelSpectrum
// ==========================================================================================================

// Calculates a power spectrum heat-map of the cyclic activity over a cycle period range using the Goertzel algorithm.
message GoertzelSpectrum {

	// The parameters to create the indicator.
	message Params {
		// The length (the number of time periods) of the sample window.
		// This determines the minimum and maximum spectrum periods.
		uint32 length = 1;
		// The minimum period to calculate, must be less than the maximal period.
		// The lowest value, 2, corresponds to the Nyquist (the maximum representable) frequency
		double min_period = 2;
		// The maximum period to calculate.
		// The highest value is equal to the observed time lapse (length samples).
		double max_period = 3;
		// The period resolution (positive number). A value of 10 means that spectrum is evaluated at every 0.1 of a period range.
		double period_resolution = 4;
		// If the first or the second order Goertzel algorithm should be used.
		bool is_first_order = 5;
		// Specifies if the spectral dilation should be compensated.
		bool is_spectral_dilation_compensation = 6;
		// Specifies if the fast attack − slow decay automatic gain control should be used.
		bool is_automatic_gain_control = 7;
		// Specifies the decay factor for the fast attack − slow decay automatic gain control.
		double automatic_gain_control_decay_factor = 8;
		// Components to use when calculating indicator from a Bar, Quote or Trade entities.
		Components components = 9;
	}

    // Possible output kinds of the indicator.
	enum OutputKind {
		// The HeatMap containing power spectrum columns.
		POWER_SPECTRUM = 0;
		// The HeatMap containing normalized to [0,1] power spectrum columns.
		POWER_SPECTRUM_NORMALIZED_TO_ZERO_ONE = 1;
		// The HeatMap containing natural logarithm of the power spectrum columns.
		LOG_POWER_SPECTRUM = 2;
		// The HeatMap containing normalized to [0,1] natural logarithm of the power spectrum columns.
		LOG_POWER_SPECTRUM_NORMALIZED_TO_ZERO_ONE = 3;
	}

	// Parameters to create the indicator.
	Params params = 1;
	// Output kinds of the indicator.
	repeated OutputKind outputs = 2;
}

// ==========================================================================================================
// XxxYyyZzz
// ==========================================================================================================
