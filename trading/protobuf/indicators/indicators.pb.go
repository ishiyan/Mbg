// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: trading/protobuf/indicators/indicators.proto

package indicators

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	entities "mbg/trading/protobuf/data/entities"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible output kinds of the indicator.
type SimpleMovingAverage_OutputKind int32

const (
	// The Scalar value of the the simple moving average.
	SimpleMovingAverage_VALUE SimpleMovingAverage_OutputKind = 0
)

// Enum value maps for SimpleMovingAverage_OutputKind.
var (
	SimpleMovingAverage_OutputKind_name = map[int32]string{
		0: "VALUE",
	}
	SimpleMovingAverage_OutputKind_value = map[string]int32{
		"VALUE": 0,
	}
)

func (x SimpleMovingAverage_OutputKind) Enum() *SimpleMovingAverage_OutputKind {
	p := new(SimpleMovingAverage_OutputKind)
	*p = x
	return p
}

func (x SimpleMovingAverage_OutputKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimpleMovingAverage_OutputKind) Descriptor() protoreflect.EnumDescriptor {
	return file_trading_protobuf_indicators_indicators_proto_enumTypes[0].Descriptor()
}

func (SimpleMovingAverage_OutputKind) Type() protoreflect.EnumType {
	return &file_trading_protobuf_indicators_indicators_proto_enumTypes[0]
}

func (x SimpleMovingAverage_OutputKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimpleMovingAverage_OutputKind.Descriptor instead.
func (SimpleMovingAverage_OutputKind) EnumDescriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{1, 0}
}

// Possible output kinds of the indicator.
type ExponentialMovingAverage_OutputKind int32

const (
	// The Scalar value of the the exponential moving average.
	ExponentialMovingAverage_VALUE ExponentialMovingAverage_OutputKind = 0
)

// Enum value maps for ExponentialMovingAverage_OutputKind.
var (
	ExponentialMovingAverage_OutputKind_name = map[int32]string{
		0: "VALUE",
	}
	ExponentialMovingAverage_OutputKind_value = map[string]int32{
		"VALUE": 0,
	}
)

func (x ExponentialMovingAverage_OutputKind) Enum() *ExponentialMovingAverage_OutputKind {
	p := new(ExponentialMovingAverage_OutputKind)
	*p = x
	return p
}

func (x ExponentialMovingAverage_OutputKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExponentialMovingAverage_OutputKind) Descriptor() protoreflect.EnumDescriptor {
	return file_trading_protobuf_indicators_indicators_proto_enumTypes[1].Descriptor()
}

func (ExponentialMovingAverage_OutputKind) Type() protoreflect.EnumType {
	return &file_trading_protobuf_indicators_indicators_proto_enumTypes[1]
}

func (x ExponentialMovingAverage_OutputKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExponentialMovingAverage_OutputKind.Descriptor instead.
func (ExponentialMovingAverage_OutputKind) EnumDescriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{2, 0}
}

// Possible output kinds of the indicator.
type StandardDeviation_OutputKind int32

const (
	// The Scalar value of the the standard deviation.
	StandardDeviation_VALUE StandardDeviation_OutputKind = 0
)

// Enum value maps for StandardDeviation_OutputKind.
var (
	StandardDeviation_OutputKind_name = map[int32]string{
		0: "VALUE",
	}
	StandardDeviation_OutputKind_value = map[string]int32{
		"VALUE": 0,
	}
)

func (x StandardDeviation_OutputKind) Enum() *StandardDeviation_OutputKind {
	p := new(StandardDeviation_OutputKind)
	*p = x
	return p
}

func (x StandardDeviation_OutputKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardDeviation_OutputKind) Descriptor() protoreflect.EnumDescriptor {
	return file_trading_protobuf_indicators_indicators_proto_enumTypes[2].Descriptor()
}

func (StandardDeviation_OutputKind) Type() protoreflect.EnumType {
	return &file_trading_protobuf_indicators_indicators_proto_enumTypes[2]
}

func (x StandardDeviation_OutputKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StandardDeviation_OutputKind.Descriptor instead.
func (StandardDeviation_OutputKind) EnumDescriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{3, 0}
}

// Possible output kinds of the indicator.
type Variance_OutputKind int32

const (
	// The Scalar value of the the variance.
	Variance_VALUE Variance_OutputKind = 0
)

// Enum value maps for Variance_OutputKind.
var (
	Variance_OutputKind_name = map[int32]string{
		0: "VALUE",
	}
	Variance_OutputKind_value = map[string]int32{
		"VALUE": 0,
	}
)

func (x Variance_OutputKind) Enum() *Variance_OutputKind {
	p := new(Variance_OutputKind)
	*p = x
	return p
}

func (x Variance_OutputKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Variance_OutputKind) Descriptor() protoreflect.EnumDescriptor {
	return file_trading_protobuf_indicators_indicators_proto_enumTypes[3].Descriptor()
}

func (Variance_OutputKind) Type() protoreflect.EnumType {
	return &file_trading_protobuf_indicators_indicators_proto_enumTypes[3]
}

func (x Variance_OutputKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Variance_OutputKind.Descriptor instead.
func (Variance_OutputKind) EnumDescriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{4, 0}
}

// Possible output kinds of the indicator.
type BollingerBands_OutputKind int32

const (
	// The Scalar value of the middle moving average.
	BollingerBands_MIDDLE_MOVING_AVERAGE_VALUE BollingerBands_OutputKind = 0
	// The Scalar value of the standard deviation.
	BollingerBands_STANDARD_DEVIATION_VALUE BollingerBands_OutputKind = 1
	// The Scalar value of the the lower Bollinger band.
	BollingerBands_LOWER_BAND_VALUE BollingerBands_OutputKind = 2
	// The Scalar value of the the upper Bollinger band.
	BollingerBands_UPPER_BAND_VALUE BollingerBands_OutputKind = 3
	// The Scalar value of the the %B.
	// It measures the price (an input to the moving average) relative to the upper and lower band.
	// %B = (Price - LowerBand) / (UpperBand - LowerBand)
	BollingerBands_PERCENT_BAND_VALUE BollingerBands_OutputKind = 4
	// The Scalar value of the the Bollinger BandWidth.
	// It measures the percentage difference between the upper band and the lower band.
	// BandWidth = (UpperBand - LowerBand) / MiddleMovingAverage
	BollingerBands_BAND_WIDTH_VALUE BollingerBands_OutputKind = 5
	// The Band containing the lower and the upper band values.
	BollingerBands_LOWER_UPPER_BAND BollingerBands_OutputKind = 6
)

// Enum value maps for BollingerBands_OutputKind.
var (
	BollingerBands_OutputKind_name = map[int32]string{
		0: "MIDDLE_MOVING_AVERAGE_VALUE",
		1: "STANDARD_DEVIATION_VALUE",
		2: "LOWER_BAND_VALUE",
		3: "UPPER_BAND_VALUE",
		4: "PERCENT_BAND_VALUE",
		5: "BAND_WIDTH_VALUE",
		6: "LOWER_UPPER_BAND",
	}
	BollingerBands_OutputKind_value = map[string]int32{
		"MIDDLE_MOVING_AVERAGE_VALUE": 0,
		"STANDARD_DEVIATION_VALUE":    1,
		"LOWER_BAND_VALUE":            2,
		"UPPER_BAND_VALUE":            3,
		"PERCENT_BAND_VALUE":          4,
		"BAND_WIDTH_VALUE":            5,
		"LOWER_UPPER_BAND":            6,
	}
)

func (x BollingerBands_OutputKind) Enum() *BollingerBands_OutputKind {
	p := new(BollingerBands_OutputKind)
	*p = x
	return p
}

func (x BollingerBands_OutputKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BollingerBands_OutputKind) Descriptor() protoreflect.EnumDescriptor {
	return file_trading_protobuf_indicators_indicators_proto_enumTypes[4].Descriptor()
}

func (BollingerBands_OutputKind) Type() protoreflect.EnumType {
	return &file_trading_protobuf_indicators_indicators_proto_enumTypes[4]
}

func (x BollingerBands_OutputKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BollingerBands_OutputKind.Descriptor instead.
func (BollingerBands_OutputKind) EnumDescriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{5, 0}
}

// Possible output kinds of the indicator.
type GoertzelSpectrum_OutputKind int32

const (
	// The HeatMap containing power spectrum columns.
	GoertzelSpectrum_POWER_SPECTRUM GoertzelSpectrum_OutputKind = 0
	// The HeatMap containing normalized to [0,1] power spectrum columns.
	GoertzelSpectrum_POWER_SPECTRUM_NORMALIZED_TO_ZERO_ONE GoertzelSpectrum_OutputKind = 1
	// The HeatMap containing natural logarithm of the power spectrum columns.
	GoertzelSpectrum_LOG_POWER_SPECTRUM GoertzelSpectrum_OutputKind = 2
	// The HeatMap containing normalized to [0,1] natural logarithm of the power spectrum columns.
	GoertzelSpectrum_LOG_POWER_SPECTRUM_NORMALIZED_TO_ZERO_ONE GoertzelSpectrum_OutputKind = 3
)

// Enum value maps for GoertzelSpectrum_OutputKind.
var (
	GoertzelSpectrum_OutputKind_name = map[int32]string{
		0: "POWER_SPECTRUM",
		1: "POWER_SPECTRUM_NORMALIZED_TO_ZERO_ONE",
		2: "LOG_POWER_SPECTRUM",
		3: "LOG_POWER_SPECTRUM_NORMALIZED_TO_ZERO_ONE",
	}
	GoertzelSpectrum_OutputKind_value = map[string]int32{
		"POWER_SPECTRUM":                            0,
		"POWER_SPECTRUM_NORMALIZED_TO_ZERO_ONE":     1,
		"LOG_POWER_SPECTRUM":                        2,
		"LOG_POWER_SPECTRUM_NORMALIZED_TO_ZERO_ONE": 3,
	}
)

func (x GoertzelSpectrum_OutputKind) Enum() *GoertzelSpectrum_OutputKind {
	p := new(GoertzelSpectrum_OutputKind)
	*p = x
	return p
}

func (x GoertzelSpectrum_OutputKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoertzelSpectrum_OutputKind) Descriptor() protoreflect.EnumDescriptor {
	return file_trading_protobuf_indicators_indicators_proto_enumTypes[5].Descriptor()
}

func (GoertzelSpectrum_OutputKind) Type() protoreflect.EnumType {
	return &file_trading_protobuf_indicators_indicators_proto_enumTypes[5]
}

func (x GoertzelSpectrum_OutputKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoertzelSpectrum_OutputKind.Descriptor instead.
func (GoertzelSpectrum_OutputKind) EnumDescriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{6, 0}
}

// Components to use when calculating indicator from a Bar, Quote or Trade entities.
type Components struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Bar component to use when calculating indicator from a Bar data.
	Bar entities.Bar_Component `protobuf:"varint,1,opt,name=bar,proto3,enum=mbg.trading.protobuf.data.entities.Bar_Component" json:"bar,omitempty"`
	// The Quote component to use when calculating indicator from a Quote data.
	Quote entities.Quote_Component `protobuf:"varint,2,opt,name=quote,proto3,enum=mbg.trading.protobuf.data.entities.Quote_Component" json:"quote,omitempty"`
	// The Trade component to use when calculating indicator from a Trade data.
	Trade entities.Trade_Component `protobuf:"varint,3,opt,name=trade,proto3,enum=mbg.trading.protobuf.data.entities.Trade_Component" json:"trade,omitempty"`
}

func (x *Components) Reset() {
	*x = Components{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components) ProtoMessage() {}

func (x *Components) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components.ProtoReflect.Descriptor instead.
func (*Components) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{0}
}

func (x *Components) GetBar() entities.Bar_Component {
	if x != nil {
		return x.Bar
	}
	return entities.Bar_Component(0)
}

func (x *Components) GetQuote() entities.Quote_Component {
	if x != nil {
		return x.Quote
	}
	return entities.Quote_Component(0)
}

func (x *Components) GetTrade() entities.Trade_Component {
	if x != nil {
		return x.Trade
	}
	return entities.Trade_Component(0)
}

// A simple, or arithmetic, moving average (SMA) is calculated by adding the samples
// for a number of time periods (length, ℓ) and then dividing this total by the number of time periods.
//
// In other words, this is an unweighted mean (gives equal weight to each sample) of the previous ℓ samples.
//
// This implementation updates the value of the SMA incrementally using the formula
//
// SMAᵢ = SMAᵢ₋₁ + (Pᵢ - Pᵢ₋ℓ) / ℓ, where ℓ is the length.
//
// The indicator is not primed during the first ℓ-1 updates.
type SimpleMovingAverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters to create the indicator.
	Params *SimpleMovingAverage_Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Output kinds of the indicator.
	Outputs []SimpleMovingAverage_OutputKind `protobuf:"varint,2,rep,packed,name=outputs,proto3,enum=mbg.trading.protobuf.indicators.SimpleMovingAverage_OutputKind" json:"outputs,omitempty"`
}

func (x *SimpleMovingAverage) Reset() {
	*x = SimpleMovingAverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleMovingAverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMovingAverage) ProtoMessage() {}

func (x *SimpleMovingAverage) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMovingAverage.ProtoReflect.Descriptor instead.
func (*SimpleMovingAverage) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleMovingAverage) GetParams() *SimpleMovingAverage_Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SimpleMovingAverage) GetOutputs() []SimpleMovingAverage_OutputKind {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Given a constant smoothing percentage factor 0 < α ≤ 1, an exponential, or exponentially weighted, moving average (EMA)
// is calculated by applying a constant smoothing factor α to a difference of today's sample and yesterday's EMA value
//
// EMAᵢ = αPᵢ + (1-α)EMAᵢ₋₁ = EMAᵢ₋₁ + α(Pᵢ - EMAᵢ₋₁), 0 < α ≤ 1
//
// Thus, the weighting for each older sample is given by the geometric progression 1, α, α², α³, …, giving much
// more importance to recent observations while not discarding older ones: all data previously used are always part of the new EMA value.
//
// α may be expressed as a percentage, so a smoothing factor of 10% is equivalent to α = 0.1. A higher α
// discounts older observations faster. Alternatively, α may be expressed in terms of ℓ time periods (length), where
// α = 2 / (ℓ + 1) and ℓ = 2/α - 1.
//
// The indicator is not primed during the first ℓ-1 updates.
//
// The 12- and 26-day EMAs are the most popular short-term averages, and they are used to create indicators like MACD and PPO.
// In general, the 50- and 200-day EMAs are used as signals of long-term trends.
//
// The very first EMA value (the seed for subsequent values) is calculated differently. This implementation allows for two algorithms for this seed.
//
// ❶ Use a simple average of the first 'period'. This is the most widely documented approach.
//
// ❷ Use first sample value as a seed. This is used in Metastock.
type ExponentialMovingAverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters to create the indicator.
	//
	// Types that are assignable to Params:
	//	*ExponentialMovingAverage_LengthParams_
	//	*ExponentialMovingAverage_SmoothingFactorParams_
	Params isExponentialMovingAverage_Params `protobuf_oneof:"params"`
	// Output kinds of the indicator.
	Outputs []ExponentialMovingAverage_OutputKind `protobuf:"varint,3,rep,packed,name=outputs,proto3,enum=mbg.trading.protobuf.indicators.ExponentialMovingAverage_OutputKind" json:"outputs,omitempty"`
}

func (x *ExponentialMovingAverage) Reset() {
	*x = ExponentialMovingAverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExponentialMovingAverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExponentialMovingAverage) ProtoMessage() {}

func (x *ExponentialMovingAverage) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExponentialMovingAverage.ProtoReflect.Descriptor instead.
func (*ExponentialMovingAverage) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{2}
}

func (m *ExponentialMovingAverage) GetParams() isExponentialMovingAverage_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *ExponentialMovingAverage) GetLengthParams() *ExponentialMovingAverage_LengthParams {
	if x, ok := x.GetParams().(*ExponentialMovingAverage_LengthParams_); ok {
		return x.LengthParams
	}
	return nil
}

func (x *ExponentialMovingAverage) GetSmoothingFactorParams() *ExponentialMovingAverage_SmoothingFactorParams {
	if x, ok := x.GetParams().(*ExponentialMovingAverage_SmoothingFactorParams_); ok {
		return x.SmoothingFactorParams
	}
	return nil
}

func (x *ExponentialMovingAverage) GetOutputs() []ExponentialMovingAverage_OutputKind {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type isExponentialMovingAverage_Params interface {
	isExponentialMovingAverage_Params()
}

type ExponentialMovingAverage_LengthParams_ struct {
	// Parameters to create the indicator based on length.
	LengthParams *ExponentialMovingAverage_LengthParams `protobuf:"bytes,1,opt,name=length_params,json=lengthParams,proto3,oneof"`
}

type ExponentialMovingAverage_SmoothingFactorParams_ struct {
	// Parameters to create the indicator based on smoothing factor.
	SmoothingFactorParams *ExponentialMovingAverage_SmoothingFactorParams `protobuf:"bytes,2,opt,name=smoothing_factor_params,json=smoothingFactorParams,proto3,oneof"`
}

func (*ExponentialMovingAverage_LengthParams_) isExponentialMovingAverage_Params() {}

func (*ExponentialMovingAverage_SmoothingFactorParams_) isExponentialMovingAverage_Params() {}

// Computes the standard deviation of the samples within a moving window of length ℓ as a square root of variance:
//
// σ² = (∑xᵢ² - (∑xᵢ)²/ℓ)/ℓ
//
// for the estimation of the population variance, or as
//
// σ² = (∑xᵢ² - (∑xᵢ)²/ℓ)/(ℓ-1)
//
// for the unbiased estimation of the sample variance, i={0,…,ℓ-1}.
type StandardDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters to create the indicator.
	Params *StandardDeviation_Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Output kinds of the indicator.
	Outputs []StandardDeviation_OutputKind `protobuf:"varint,2,rep,packed,name=outputs,proto3,enum=mbg.trading.protobuf.indicators.StandardDeviation_OutputKind" json:"outputs,omitempty"`
}

func (x *StandardDeviation) Reset() {
	*x = StandardDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardDeviation) ProtoMessage() {}

func (x *StandardDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardDeviation.ProtoReflect.Descriptor instead.
func (*StandardDeviation) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{3}
}

func (x *StandardDeviation) GetParams() *StandardDeviation_Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *StandardDeviation) GetOutputs() []StandardDeviation_OutputKind {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Computes the variance of the samples within a moving window of length ℓ:
//
// σ² = (∑xᵢ² - (∑xᵢ)²/ℓ)/ℓ
//
// for the estimation of the population variance, or as
//
// σ² = (∑xᵢ² - (∑xᵢ)²/ℓ)/(ℓ-1)
//
// for the unbiased estimation of the sample variance, i={0,…,ℓ-1}.
type Variance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters to create the indicator.
	Params *Variance_Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Output kinds of the indicator.
	Outputs []Variance_OutputKind `protobuf:"varint,2,rep,packed,name=outputs,proto3,enum=mbg.trading.protobuf.indicators.Variance_OutputKind" json:"outputs,omitempty"`
}

func (x *Variance) Reset() {
	*x = Variance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variance) ProtoMessage() {}

func (x *Variance) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variance.ProtoReflect.Descriptor instead.
func (*Variance) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{4}
}

func (x *Variance) GetParams() *Variance_Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Variance) GetOutputs() []Variance_OutputKind {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Bollinger Bands are a type of price envelope invented by John Bollinger in the 1980s. Bollinger bands consist of:
//
// ❶ a middle band being an ℓ-period moving average (MA)
//
// ❷ an upper band at K times an ℓ-period standard deviation σ above the middle band (MA + Kσ)
//
// ❸ a lower band at K times an ℓ-period standard deviation σ below the middle band (MA - Kσ)
//
// Typical values for ℓ and K are 20 and 2, respectively. The default choice for the average is a simple moving average, but other types of averages can be employed as needed.
//
// Exponential moving averages are a common second choice. Usually the same period is used for both the middle band and the calculation of standard deviation.
type BollingerBands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters to create the indicator.
	Params *BollingerBands_Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Output kinds of the indicator.
	Outputs []BollingerBands_OutputKind `protobuf:"varint,2,rep,packed,name=outputs,proto3,enum=mbg.trading.protobuf.indicators.BollingerBands_OutputKind" json:"outputs,omitempty"`
}

func (x *BollingerBands) Reset() {
	*x = BollingerBands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BollingerBands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BollingerBands) ProtoMessage() {}

func (x *BollingerBands) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BollingerBands.ProtoReflect.Descriptor instead.
func (*BollingerBands) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{5}
}

func (x *BollingerBands) GetParams() *BollingerBands_Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *BollingerBands) GetOutputs() []BollingerBands_OutputKind {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Calculates a power spectrum heat-map of the cyclic activity over a cycle period range using the Goertzel algorithm.
type GoertzelSpectrum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters to create the indicator.
	Params *GoertzelSpectrum_Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Output kinds of the indicator.
	Outputs []GoertzelSpectrum_OutputKind `protobuf:"varint,2,rep,packed,name=outputs,proto3,enum=mbg.trading.protobuf.indicators.GoertzelSpectrum_OutputKind" json:"outputs,omitempty"`
}

func (x *GoertzelSpectrum) Reset() {
	*x = GoertzelSpectrum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoertzelSpectrum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoertzelSpectrum) ProtoMessage() {}

func (x *GoertzelSpectrum) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoertzelSpectrum.ProtoReflect.Descriptor instead.
func (*GoertzelSpectrum) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{6}
}

func (x *GoertzelSpectrum) GetParams() *GoertzelSpectrum_Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GoertzelSpectrum) GetOutputs() []GoertzelSpectrum_OutputKind {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// The parameters to create the indicator.
type SimpleMovingAverage_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The length (the number of time periods) of the simple moving average, should be greater than 1.
	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// Components to use when calculating indicator from a Bar, Quote or Trade entities.
	Components *Components `protobuf:"bytes,2,opt,name=components,proto3" json:"components,omitempty"`
}

func (x *SimpleMovingAverage_Params) Reset() {
	*x = SimpleMovingAverage_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleMovingAverage_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMovingAverage_Params) ProtoMessage() {}

func (x *SimpleMovingAverage_Params) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMovingAverage_Params.ProtoReflect.Descriptor instead.
func (*SimpleMovingAverage_Params) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SimpleMovingAverage_Params) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *SimpleMovingAverage_Params) GetComponents() *Components {
	if x != nil {
		return x.Components
	}
	return nil
}

// The parameters to create the indicator based on length.
type ExponentialMovingAverage_LengthParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The length (the number of time periods) of the exponential moving average, should be greater than 1.
	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// If the very first exponential moving average value is a simple average of the first 'period' (the most widely documented approach) or the first input value (used in Metastock).
	FirstIsAverage bool `protobuf:"varint,2,opt,name=first_is_average,json=firstIsAverage,proto3" json:"first_is_average,omitempty"`
	// Components to use when calculating indicator from a Bar, Quote or Trade entities.
	Components *Components `protobuf:"bytes,3,opt,name=components,proto3" json:"components,omitempty"`
}

func (x *ExponentialMovingAverage_LengthParams) Reset() {
	*x = ExponentialMovingAverage_LengthParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExponentialMovingAverage_LengthParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExponentialMovingAverage_LengthParams) ProtoMessage() {}

func (x *ExponentialMovingAverage_LengthParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExponentialMovingAverage_LengthParams.ProtoReflect.Descriptor instead.
func (*ExponentialMovingAverage_LengthParams) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ExponentialMovingAverage_LengthParams) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ExponentialMovingAverage_LengthParams) GetFirstIsAverage() bool {
	if x != nil {
		return x.FirstIsAverage
	}
	return false
}

func (x *ExponentialMovingAverage_LengthParams) GetComponents() *Components {
	if x != nil {
		return x.Components
	}
	return nil
}

// The parameters to create the indicator based on smoothing factor.
type ExponentialMovingAverage_SmoothingFactorParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The smoothing factor, α, of the exponential moving average.
	// The equivalent length ℓ = 2/α - 1, 0 < α ≤ 1, 1 ≤ ℓ.
	SmoothingFactor float64 `protobuf:"fixed64,1,opt,name=smoothing_factor,json=smoothingFactor,proto3" json:"smoothing_factor,omitempty"`
	// If the very first exponential moving average value is a simple average of the first 'period' (the most widely documented approach) or the first input value (used in Metastock).
	FirstIsAverage bool `protobuf:"varint,2,opt,name=first_is_average,json=firstIsAverage,proto3" json:"first_is_average,omitempty"`
	// Components to use when calculating indicator from a Bar, Quote or Trade entities.
	Components *Components `protobuf:"bytes,3,opt,name=components,proto3" json:"components,omitempty"`
}

func (x *ExponentialMovingAverage_SmoothingFactorParams) Reset() {
	*x = ExponentialMovingAverage_SmoothingFactorParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExponentialMovingAverage_SmoothingFactorParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExponentialMovingAverage_SmoothingFactorParams) ProtoMessage() {}

func (x *ExponentialMovingAverage_SmoothingFactorParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExponentialMovingAverage_SmoothingFactorParams.ProtoReflect.Descriptor instead.
func (*ExponentialMovingAverage_SmoothingFactorParams) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ExponentialMovingAverage_SmoothingFactorParams) GetSmoothingFactor() float64 {
	if x != nil {
		return x.SmoothingFactor
	}
	return 0
}

func (x *ExponentialMovingAverage_SmoothingFactorParams) GetFirstIsAverage() bool {
	if x != nil {
		return x.FirstIsAverage
	}
	return false
}

func (x *ExponentialMovingAverage_SmoothingFactorParams) GetComponents() *Components {
	if x != nil {
		return x.Components
	}
	return nil
}

// The parameters to create the indicator.
type StandardDeviation_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The length (the number of time periods, ℓ) of the moving window to calculate the standard deviation, should be greater than 1.
	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// If the estimate of the standard deviation is based on the unbiased sample variance or on the population variance.
	IsUnbiased bool `protobuf:"varint,2,opt,name=is_unbiased,json=isUnbiased,proto3" json:"is_unbiased,omitempty"`
	// Components to use when calculating indicator from a Bar, Quote or Trade entities.
	Components *Components `protobuf:"bytes,3,opt,name=components,proto3" json:"components,omitempty"`
}

func (x *StandardDeviation_Params) Reset() {
	*x = StandardDeviation_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardDeviation_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardDeviation_Params) ProtoMessage() {}

func (x *StandardDeviation_Params) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardDeviation_Params.ProtoReflect.Descriptor instead.
func (*StandardDeviation_Params) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{3, 0}
}

func (x *StandardDeviation_Params) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *StandardDeviation_Params) GetIsUnbiased() bool {
	if x != nil {
		return x.IsUnbiased
	}
	return false
}

func (x *StandardDeviation_Params) GetComponents() *Components {
	if x != nil {
		return x.Components
	}
	return nil
}

// The parameters to create the indicator.
type Variance_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The length (the number of time periods, ℓ) of the moving window to calculate the variance, should be greater than 1.
	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// If the estimate of the variance is the unbiased sample variance or the population variance.
	IsUnbiased bool `protobuf:"varint,2,opt,name=is_unbiased,json=isUnbiased,proto3" json:"is_unbiased,omitempty"`
	// Components to use when calculating indicator from a Bar, Quote or Trade entities.
	Components *Components `protobuf:"bytes,3,opt,name=components,proto3" json:"components,omitempty"`
}

func (x *Variance_Params) Reset() {
	*x = Variance_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variance_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variance_Params) ProtoMessage() {}

func (x *Variance_Params) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variance_Params.ProtoReflect.Descriptor instead.
func (*Variance_Params) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Variance_Params) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Variance_Params) GetIsUnbiased() bool {
	if x != nil {
		return x.IsUnbiased
	}
	return false
}

func (x *Variance_Params) GetComponents() *Components {
	if x != nil {
		return x.Components
	}
	return nil
}

// The parameters to create the indicator.
type BollingerBands_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The length (the number of time periods) to calculate the standard deviation.
	// Typically this should be equal to the length of the moving average.
	StandardDeviationLength uint32 `protobuf:"varint,1,opt,name=standard_deviation_length,json=standardDeviationLength,proto3" json:"standard_deviation_length,omitempty"`
	// If the estimate of the standard deviation is based on the unbiased sample variance or on the population variance.
	StandardDeviationIsUnbiased bool `protobuf:"varint,2,opt,name=standard_deviation_is_unbiased,json=standardDeviationIsUnbiased,proto3" json:"standard_deviation_is_unbiased,omitempty"`
	// Components to use when calculating standard deviation from a Bar, Quote or Trade entities.
	StandardDeviationComponents *Components `protobuf:"bytes,3,opt,name=standard_deviation_components,json=standardDeviationComponents,proto3" json:"standard_deviation_components,omitempty"`
	// The multiplier to multiply the standard deviation.
	Multiplier float64 `protobuf:"fixed64,4,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// The parameters to create a middle moving average.
	// Typically the length of the moving average should be equal to the length used to calculate the standard deviation.
	MovingAverageParams float64 `protobuf:"fixed64,5,opt,name=moving_average_params,json=movingAverageParams,proto3" json:"moving_average_params,omitempty"`
	// Components to use when calculating %B value from a Bar, Quote or Trade entities.
	PercentBComponents *Components `protobuf:"bytes,6,opt,name=percent_b_components,json=percentBComponents,proto3" json:"percent_b_components,omitempty"`
}

func (x *BollingerBands_Params) Reset() {
	*x = BollingerBands_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BollingerBands_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BollingerBands_Params) ProtoMessage() {}

func (x *BollingerBands_Params) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BollingerBands_Params.ProtoReflect.Descriptor instead.
func (*BollingerBands_Params) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BollingerBands_Params) GetStandardDeviationLength() uint32 {
	if x != nil {
		return x.StandardDeviationLength
	}
	return 0
}

func (x *BollingerBands_Params) GetStandardDeviationIsUnbiased() bool {
	if x != nil {
		return x.StandardDeviationIsUnbiased
	}
	return false
}

func (x *BollingerBands_Params) GetStandardDeviationComponents() *Components {
	if x != nil {
		return x.StandardDeviationComponents
	}
	return nil
}

func (x *BollingerBands_Params) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *BollingerBands_Params) GetMovingAverageParams() float64 {
	if x != nil {
		return x.MovingAverageParams
	}
	return 0
}

func (x *BollingerBands_Params) GetPercentBComponents() *Components {
	if x != nil {
		return x.PercentBComponents
	}
	return nil
}

// The parameters to create the indicator.
type GoertzelSpectrum_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The length (the number of time periods) of the sample window.
	// This determines the minimum and maximum spectrum periods.
	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// The minimum period to calculate, must be less than the maximal period.
	// The lowest value, 2, corresponds to the Nyquist (the maximum representable) frequency
	MinPeriod float64 `protobuf:"fixed64,2,opt,name=min_period,json=minPeriod,proto3" json:"min_period,omitempty"`
	// The maximum period to calculate.
	// The highest value is equal to the observed time lapse (length samples).
	MaxPeriod float64 `protobuf:"fixed64,3,opt,name=max_period,json=maxPeriod,proto3" json:"max_period,omitempty"`
	// The period resolution (positive number). A value of 10 means that spectrum is evaluated at every 0.1 of a period range.
	PeriodResolution float64 `protobuf:"fixed64,4,opt,name=period_resolution,json=periodResolution,proto3" json:"period_resolution,omitempty"`
	// If the first or the second order Goertzel algorithm should be used.
	IsFirstOrder bool `protobuf:"varint,5,opt,name=is_first_order,json=isFirstOrder,proto3" json:"is_first_order,omitempty"`
	// Specifies if the spectral dilation should be compensated.
	IsSpectralDilationCompensation bool `protobuf:"varint,6,opt,name=is_spectral_dilation_compensation,json=isSpectralDilationCompensation,proto3" json:"is_spectral_dilation_compensation,omitempty"`
	// Specifies if the fast attack − slow decay automatic gain control should be used.
	IsAutomaticGainControl bool `protobuf:"varint,7,opt,name=is_automatic_gain_control,json=isAutomaticGainControl,proto3" json:"is_automatic_gain_control,omitempty"`
	// Specifies the decay factor for the fast attack − slow decay automatic gain control.
	AutomaticGainControlDecayFactor float64 `protobuf:"fixed64,8,opt,name=automatic_gain_control_decay_factor,json=automaticGainControlDecayFactor,proto3" json:"automatic_gain_control_decay_factor,omitempty"`
	// Components to use when calculating indicator from a Bar, Quote or Trade entities.
	Components *Components `protobuf:"bytes,9,opt,name=components,proto3" json:"components,omitempty"`
}

func (x *GoertzelSpectrum_Params) Reset() {
	*x = GoertzelSpectrum_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoertzelSpectrum_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoertzelSpectrum_Params) ProtoMessage() {}

func (x *GoertzelSpectrum_Params) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_indicators_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoertzelSpectrum_Params.ProtoReflect.Descriptor instead.
func (*GoertzelSpectrum_Params) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_indicators_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GoertzelSpectrum_Params) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GoertzelSpectrum_Params) GetMinPeriod() float64 {
	if x != nil {
		return x.MinPeriod
	}
	return 0
}

func (x *GoertzelSpectrum_Params) GetMaxPeriod() float64 {
	if x != nil {
		return x.MaxPeriod
	}
	return 0
}

func (x *GoertzelSpectrum_Params) GetPeriodResolution() float64 {
	if x != nil {
		return x.PeriodResolution
	}
	return 0
}

func (x *GoertzelSpectrum_Params) GetIsFirstOrder() bool {
	if x != nil {
		return x.IsFirstOrder
	}
	return false
}

func (x *GoertzelSpectrum_Params) GetIsSpectralDilationCompensation() bool {
	if x != nil {
		return x.IsSpectralDilationCompensation
	}
	return false
}

func (x *GoertzelSpectrum_Params) GetIsAutomaticGainControl() bool {
	if x != nil {
		return x.IsAutomaticGainControl
	}
	return false
}

func (x *GoertzelSpectrum_Params) GetAutomaticGainControlDecayFactor() float64 {
	if x != nil {
		return x.AutomaticGainControlDecayFactor
	}
	return 0
}

func (x *GoertzelSpectrum_Params) GetComponents() *Components {
	if x != nil {
		return x.Components
	}
	return nil
}

var File_trading_protobuf_indicators_indicators_proto protoreflect.FileDescriptor

var file_trading_protobuf_indicators_indicators_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f,
	0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x1a,
	0x2d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7,
	0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x03, 0x62, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x62, 0x67,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x42, 0x61, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x62,
	0x61, 0x72, 0x12, 0x49, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6d,
	0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x13, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x53, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x59, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x1a, 0x6d, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x17, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x22, 0xf4, 0x05, 0x0a, 0x18, 0x45, 0x78, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x0d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6d,
	0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x17, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x15, 0x73, 0x6d, 0x6f, 0x6f, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x5e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x44, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d,
	0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x1a, 0x9d, 0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x73, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0xb9, 0x01, 0x0a, 0x15, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6d,
	0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69,
	0x73, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x73, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x17, 0x0a, 0x0a,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x00, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0xe9, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x62, 0x67, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x62, 0x69, 0x61,
	0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x6e, 0x62,
	0x69, 0x61, 0x73, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x62, 0x67, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x17, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x22, 0xce, 0x02, 0x0a, 0x08,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x4e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x62, 0x69,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x6e,
	0x62, 0x69, 0x61, 0x73, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x62, 0x67,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x17, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x22, 0xa4, 0x06, 0x0a,
	0x0e, 0x42, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x4e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x42, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x54, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x42, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0xad, 0x03, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x1e,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x62, 0x69, 0x61, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x55, 0x6e, 0x62, 0x69, 0x61, 0x73, 0x65,
	0x64, 0x12, 0x6f, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x12, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x4d,
	0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e,
	0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x50,
	0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x4e, 0x44, 0x5f,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e,
	0x44, 0x10, 0x06, 0x22, 0xa6, 0x06, 0x0a, 0x10, 0x47, 0x6f, 0x65, 0x72, 0x74, 0x7a, 0x65, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x12, 0x50, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x47, 0x6f, 0x65, 0x72, 0x74,
	0x7a, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x56, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6d, 0x62,
	0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x47, 0x6f,
	0x65, 0x72, 0x74, 0x7a, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x1a, 0xd2, 0x03, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x69, 0x73, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x23,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44,
	0x65, 0x63, 0x61, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x54, 0x52, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x52, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x52, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x2d, 0x0a,
	0x29, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54,
	0x52, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x42, 0x21, 0x5a, 0x1f,
	0x6d, 0x62, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trading_protobuf_indicators_indicators_proto_rawDescOnce sync.Once
	file_trading_protobuf_indicators_indicators_proto_rawDescData = file_trading_protobuf_indicators_indicators_proto_rawDesc
)

func file_trading_protobuf_indicators_indicators_proto_rawDescGZIP() []byte {
	file_trading_protobuf_indicators_indicators_proto_rawDescOnce.Do(func() {
		file_trading_protobuf_indicators_indicators_proto_rawDescData = protoimpl.X.CompressGZIP(file_trading_protobuf_indicators_indicators_proto_rawDescData)
	})
	return file_trading_protobuf_indicators_indicators_proto_rawDescData
}

var file_trading_protobuf_indicators_indicators_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_trading_protobuf_indicators_indicators_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_trading_protobuf_indicators_indicators_proto_goTypes = []interface{}{
	(SimpleMovingAverage_OutputKind)(0),                    // 0: mbg.trading.protobuf.indicators.SimpleMovingAverage.OutputKind
	(ExponentialMovingAverage_OutputKind)(0),               // 1: mbg.trading.protobuf.indicators.ExponentialMovingAverage.OutputKind
	(StandardDeviation_OutputKind)(0),                      // 2: mbg.trading.protobuf.indicators.StandardDeviation.OutputKind
	(Variance_OutputKind)(0),                               // 3: mbg.trading.protobuf.indicators.Variance.OutputKind
	(BollingerBands_OutputKind)(0),                         // 4: mbg.trading.protobuf.indicators.BollingerBands.OutputKind
	(GoertzelSpectrum_OutputKind)(0),                       // 5: mbg.trading.protobuf.indicators.GoertzelSpectrum.OutputKind
	(*Components)(nil),                                     // 6: mbg.trading.protobuf.indicators.Components
	(*SimpleMovingAverage)(nil),                            // 7: mbg.trading.protobuf.indicators.SimpleMovingAverage
	(*ExponentialMovingAverage)(nil),                       // 8: mbg.trading.protobuf.indicators.ExponentialMovingAverage
	(*StandardDeviation)(nil),                              // 9: mbg.trading.protobuf.indicators.StandardDeviation
	(*Variance)(nil),                                       // 10: mbg.trading.protobuf.indicators.Variance
	(*BollingerBands)(nil),                                 // 11: mbg.trading.protobuf.indicators.BollingerBands
	(*GoertzelSpectrum)(nil),                               // 12: mbg.trading.protobuf.indicators.GoertzelSpectrum
	(*SimpleMovingAverage_Params)(nil),                     // 13: mbg.trading.protobuf.indicators.SimpleMovingAverage.Params
	(*ExponentialMovingAverage_LengthParams)(nil),          // 14: mbg.trading.protobuf.indicators.ExponentialMovingAverage.LengthParams
	(*ExponentialMovingAverage_SmoothingFactorParams)(nil), // 15: mbg.trading.protobuf.indicators.ExponentialMovingAverage.SmoothingFactorParams
	(*StandardDeviation_Params)(nil),                       // 16: mbg.trading.protobuf.indicators.StandardDeviation.Params
	(*Variance_Params)(nil),                                // 17: mbg.trading.protobuf.indicators.Variance.Params
	(*BollingerBands_Params)(nil),                          // 18: mbg.trading.protobuf.indicators.BollingerBands.Params
	(*GoertzelSpectrum_Params)(nil),                        // 19: mbg.trading.protobuf.indicators.GoertzelSpectrum.Params
	(entities.Bar_Component)(0),                            // 20: mbg.trading.protobuf.data.entities.Bar.Component
	(entities.Quote_Component)(0),                          // 21: mbg.trading.protobuf.data.entities.Quote.Component
	(entities.Trade_Component)(0),                          // 22: mbg.trading.protobuf.data.entities.Trade.Component
}
var file_trading_protobuf_indicators_indicators_proto_depIdxs = []int32{
	20, // 0: mbg.trading.protobuf.indicators.Components.bar:type_name -> mbg.trading.protobuf.data.entities.Bar.Component
	21, // 1: mbg.trading.protobuf.indicators.Components.quote:type_name -> mbg.trading.protobuf.data.entities.Quote.Component
	22, // 2: mbg.trading.protobuf.indicators.Components.trade:type_name -> mbg.trading.protobuf.data.entities.Trade.Component
	13, // 3: mbg.trading.protobuf.indicators.SimpleMovingAverage.params:type_name -> mbg.trading.protobuf.indicators.SimpleMovingAverage.Params
	0,  // 4: mbg.trading.protobuf.indicators.SimpleMovingAverage.outputs:type_name -> mbg.trading.protobuf.indicators.SimpleMovingAverage.OutputKind
	14, // 5: mbg.trading.protobuf.indicators.ExponentialMovingAverage.length_params:type_name -> mbg.trading.protobuf.indicators.ExponentialMovingAverage.LengthParams
	15, // 6: mbg.trading.protobuf.indicators.ExponentialMovingAverage.smoothing_factor_params:type_name -> mbg.trading.protobuf.indicators.ExponentialMovingAverage.SmoothingFactorParams
	1,  // 7: mbg.trading.protobuf.indicators.ExponentialMovingAverage.outputs:type_name -> mbg.trading.protobuf.indicators.ExponentialMovingAverage.OutputKind
	16, // 8: mbg.trading.protobuf.indicators.StandardDeviation.params:type_name -> mbg.trading.protobuf.indicators.StandardDeviation.Params
	2,  // 9: mbg.trading.protobuf.indicators.StandardDeviation.outputs:type_name -> mbg.trading.protobuf.indicators.StandardDeviation.OutputKind
	17, // 10: mbg.trading.protobuf.indicators.Variance.params:type_name -> mbg.trading.protobuf.indicators.Variance.Params
	3,  // 11: mbg.trading.protobuf.indicators.Variance.outputs:type_name -> mbg.trading.protobuf.indicators.Variance.OutputKind
	18, // 12: mbg.trading.protobuf.indicators.BollingerBands.params:type_name -> mbg.trading.protobuf.indicators.BollingerBands.Params
	4,  // 13: mbg.trading.protobuf.indicators.BollingerBands.outputs:type_name -> mbg.trading.protobuf.indicators.BollingerBands.OutputKind
	19, // 14: mbg.trading.protobuf.indicators.GoertzelSpectrum.params:type_name -> mbg.trading.protobuf.indicators.GoertzelSpectrum.Params
	5,  // 15: mbg.trading.protobuf.indicators.GoertzelSpectrum.outputs:type_name -> mbg.trading.protobuf.indicators.GoertzelSpectrum.OutputKind
	6,  // 16: mbg.trading.protobuf.indicators.SimpleMovingAverage.Params.components:type_name -> mbg.trading.protobuf.indicators.Components
	6,  // 17: mbg.trading.protobuf.indicators.ExponentialMovingAverage.LengthParams.components:type_name -> mbg.trading.protobuf.indicators.Components
	6,  // 18: mbg.trading.protobuf.indicators.ExponentialMovingAverage.SmoothingFactorParams.components:type_name -> mbg.trading.protobuf.indicators.Components
	6,  // 19: mbg.trading.protobuf.indicators.StandardDeviation.Params.components:type_name -> mbg.trading.protobuf.indicators.Components
	6,  // 20: mbg.trading.protobuf.indicators.Variance.Params.components:type_name -> mbg.trading.protobuf.indicators.Components
	6,  // 21: mbg.trading.protobuf.indicators.BollingerBands.Params.standard_deviation_components:type_name -> mbg.trading.protobuf.indicators.Components
	6,  // 22: mbg.trading.protobuf.indicators.BollingerBands.Params.percent_b_components:type_name -> mbg.trading.protobuf.indicators.Components
	6,  // 23: mbg.trading.protobuf.indicators.GoertzelSpectrum.Params.components:type_name -> mbg.trading.protobuf.indicators.Components
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_trading_protobuf_indicators_indicators_proto_init() }
func file_trading_protobuf_indicators_indicators_proto_init() {
	if File_trading_protobuf_indicators_indicators_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trading_protobuf_indicators_indicators_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleMovingAverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExponentialMovingAverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BollingerBands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoertzelSpectrum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleMovingAverage_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExponentialMovingAverage_LengthParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExponentialMovingAverage_SmoothingFactorParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardDeviation_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variance_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BollingerBands_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_indicators_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoertzelSpectrum_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trading_protobuf_indicators_indicators_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ExponentialMovingAverage_LengthParams_)(nil),
		(*ExponentialMovingAverage_SmoothingFactorParams_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trading_protobuf_indicators_indicators_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trading_protobuf_indicators_indicators_proto_goTypes,
		DependencyIndexes: file_trading_protobuf_indicators_indicators_proto_depIdxs,
		EnumInfos:         file_trading_protobuf_indicators_indicators_proto_enumTypes,
		MessageInfos:      file_trading_protobuf_indicators_indicators_proto_msgTypes,
	}.Build()
	File_trading_protobuf_indicators_indicators_proto = out.File
	file_trading_protobuf_indicators_indicators_proto_rawDesc = nil
	file_trading_protobuf_indicators_indicators_proto_goTypes = nil
	file_trading_protobuf_indicators_indicators_proto_depIdxs = nil
}
