// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: trading/protobuf/indicators/types.proto

package indicators

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Identifies a type of an indicator.
type IndicatorType int32

const (
	// Unknown indicator.
	IndicatorType_UNKNOWN IndicatorType = 0
	// Simple Moving Average (SMA).
	IndicatorType_SAMPLE_MOVING_AVERAGE IndicatorType = 1
	// Exponential Moving Average (EMA).
	IndicatorType_EXPONENTIAL_MOVING_AVERAGE IndicatorType = 2
	// Standard Deviation (STDEV).
	IndicatorType_STANDARD_DEVIATION IndicatorType = 3
	// Variance (VAR).
	IndicatorType_VARIANCE IndicatorType = 4
	// Bollinger Bands (BB).
	IndicatorType_BOLLINGER_BANDS IndicatorType = 5
	// Goertzel power spectrum (GOERTZEL).
	IndicatorType_GOERTZEL_SPECTRUM IndicatorType = 6
)

// Enum value maps for IndicatorType.
var (
	IndicatorType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SAMPLE_MOVING_AVERAGE",
		2: "EXPONENTIAL_MOVING_AVERAGE",
		3: "STANDARD_DEVIATION",
		4: "VARIANCE",
		5: "BOLLINGER_BANDS",
		6: "GOERTZEL_SPECTRUM",
	}
	IndicatorType_value = map[string]int32{
		"UNKNOWN":                    0,
		"SAMPLE_MOVING_AVERAGE":      1,
		"EXPONENTIAL_MOVING_AVERAGE": 2,
		"STANDARD_DEVIATION":         3,
		"VARIANCE":                   4,
		"BOLLINGER_BANDS":            5,
		"GOERTZEL_SPECTRUM":          6,
	}
)

func (x IndicatorType) Enum() *IndicatorType {
	p := new(IndicatorType)
	*p = x
	return p
}

func (x IndicatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndicatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_trading_protobuf_indicators_types_proto_enumTypes[0].Descriptor()
}

func (IndicatorType) Type() protoreflect.EnumType {
	return &file_trading_protobuf_indicators_types_proto_enumTypes[0]
}

func (x IndicatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndicatorType.Descriptor instead.
func (IndicatorType) EnumDescriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_types_proto_rawDescGZIP(), []int{0}
}

// Identifies a type of an indicator output.
type OutputType int32

const (
	// Holds a time stamp and a value.
	OutputType_SCALAR OutputType = 0
	// Holds a time stamp and two values representing upper and lower lines of a band.
	OutputType_BAND OutputType = 1
	// Holds a time stamp and an array of values representing a heat-map column.
	OutputType_HEATMAP OutputType = 2
)

// Enum value maps for OutputType.
var (
	OutputType_name = map[int32]string{
		0: "SCALAR",
		1: "BAND",
		2: "HEATMAP",
	}
	OutputType_value = map[string]int32{
		"SCALAR":  0,
		"BAND":    1,
		"HEATMAP": 2,
	}
)

func (x OutputType) Enum() *OutputType {
	p := new(OutputType)
	*p = x
	return p
}

func (x OutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_trading_protobuf_indicators_types_proto_enumTypes[1].Descriptor()
}

func (OutputType) Type() protoreflect.EnumType {
	return &file_trading_protobuf_indicators_types_proto_enumTypes[1]
}

func (x OutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputType.Descriptor instead.
func (OutputType) EnumDescriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_types_proto_rawDescGZIP(), []int{1}
}

// An input parameters to create an indicator.
type IndicatorParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Params:
	//	*IndicatorParams_SimpleMovingAverage
	//	*IndicatorParams_ExponentialMovingAverage
	//	*IndicatorParams_StandardDeviation
	//	*IndicatorParams_Variance
	//	*IndicatorParams_BollingerBands
	//	*IndicatorParams_GoertzelSpectrum
	Params isIndicatorParams_Params `protobuf_oneof:"params"`
}

func (x *IndicatorParams) Reset() {
	*x = IndicatorParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorParams) ProtoMessage() {}

func (x *IndicatorParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorParams.ProtoReflect.Descriptor instead.
func (*IndicatorParams) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_types_proto_rawDescGZIP(), []int{0}
}

func (m *IndicatorParams) GetParams() isIndicatorParams_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *IndicatorParams) GetSimpleMovingAverage() *SimpleMovingAverage {
	if x, ok := x.GetParams().(*IndicatorParams_SimpleMovingAverage); ok {
		return x.SimpleMovingAverage
	}
	return nil
}

func (x *IndicatorParams) GetExponentialMovingAverage() *ExponentialMovingAverage {
	if x, ok := x.GetParams().(*IndicatorParams_ExponentialMovingAverage); ok {
		return x.ExponentialMovingAverage
	}
	return nil
}

func (x *IndicatorParams) GetStandardDeviation() *StandardDeviation {
	if x, ok := x.GetParams().(*IndicatorParams_StandardDeviation); ok {
		return x.StandardDeviation
	}
	return nil
}

func (x *IndicatorParams) GetVariance() *Variance {
	if x, ok := x.GetParams().(*IndicatorParams_Variance); ok {
		return x.Variance
	}
	return nil
}

func (x *IndicatorParams) GetBollingerBands() *BollingerBands {
	if x, ok := x.GetParams().(*IndicatorParams_BollingerBands); ok {
		return x.BollingerBands
	}
	return nil
}

func (x *IndicatorParams) GetGoertzelSpectrum() *GoertzelSpectrum {
	if x, ok := x.GetParams().(*IndicatorParams_GoertzelSpectrum); ok {
		return x.GoertzelSpectrum
	}
	return nil
}

type isIndicatorParams_Params interface {
	isIndicatorParams_Params()
}

type IndicatorParams_SimpleMovingAverage struct {
	SimpleMovingAverage *SimpleMovingAverage `protobuf:"bytes,1,opt,name=simple_moving_average,json=simpleMovingAverage,proto3,oneof"`
}

type IndicatorParams_ExponentialMovingAverage struct {
	ExponentialMovingAverage *ExponentialMovingAverage `protobuf:"bytes,2,opt,name=exponential_moving_average,json=exponentialMovingAverage,proto3,oneof"`
}

type IndicatorParams_StandardDeviation struct {
	StandardDeviation *StandardDeviation `protobuf:"bytes,3,opt,name=standard_deviation,json=standardDeviation,proto3,oneof"`
}

type IndicatorParams_Variance struct {
	Variance *Variance `protobuf:"bytes,4,opt,name=variance,proto3,oneof"`
}

type IndicatorParams_BollingerBands struct {
	BollingerBands *BollingerBands `protobuf:"bytes,5,opt,name=bollinger_bands,json=bollingerBands,proto3,oneof"`
}

type IndicatorParams_GoertzelSpectrum struct {
	GoertzelSpectrum *GoertzelSpectrum `protobuf:"bytes,6,opt,name=goertzel_spectrum,json=goertzelSpectrum,proto3,oneof"`
}

func (*IndicatorParams_SimpleMovingAverage) isIndicatorParams_Params() {}

func (*IndicatorParams_ExponentialMovingAverage) isIndicatorParams_Params() {}

func (*IndicatorParams_StandardDeviation) isIndicatorParams_Params() {}

func (*IndicatorParams_Variance) isIndicatorParams_Params() {}

func (*IndicatorParams_BollingerBands) isIndicatorParams_Params() {}

func (*IndicatorParams_GoertzelSpectrum) isIndicatorParams_Params() {}

// Contains information about a single indicator output.
type OutputMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies a single indicator output.
	// This is an integer representation of an OutputKind of related indicator.
	Kind int32 `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// A type of the output.
	Type OutputType `protobuf:"varint,2,opt,name=type,proto3,enum=mbg.trading.protobuf.indicators.OutputType" json:"type,omitempty"`
	// Identifies an instance of the output.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Describes the output.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OutputMetadata) Reset() {
	*x = OutputMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputMetadata) ProtoMessage() {}

func (x *OutputMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputMetadata.ProtoReflect.Descriptor instead.
func (*OutputMetadata) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_types_proto_rawDescGZIP(), []int{1}
}

func (x *OutputMetadata) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *OutputMetadata) GetType() OutputType {
	if x != nil {
		return x.Type
	}
	return OutputType_SCALAR
}

func (x *OutputMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OutputMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes an output metadata of an indicator.
type IndicatorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the indicator.
	IndicatorType IndicatorType `protobuf:"varint,1,opt,name=indicator_type,json=indicatorType,proto3,enum=mbg.trading.protobuf.indicators.IndicatorType" json:"indicator_type,omitempty"`
	// A metadata object per indicator output.
	Outputs []*OutputMetadata `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *IndicatorMetadata) Reset() {
	*x = IndicatorMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading_protobuf_indicators_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorMetadata) ProtoMessage() {}

func (x *IndicatorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_trading_protobuf_indicators_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorMetadata.ProtoReflect.Descriptor instead.
func (*IndicatorMetadata) Descriptor() ([]byte, []int) {
	return file_trading_protobuf_indicators_types_proto_rawDescGZIP(), []int{2}
}

func (x *IndicatorMetadata) GetIndicatorType() IndicatorType {
	if x != nil {
		return x.IndicatorType
	}
	return IndicatorType_UNKNOWN
}

func (x *IndicatorMetadata) GetOutputs() []*OutputMetadata {
	if x != nil {
		return x.Outputs
	}
	return nil
}

var File_trading_protobuf_indicators_types_proto protoreflect.FileDescriptor

var file_trading_protobuf_indicators_types_proto_rawDesc = []byte{
	0x0a, 0x27, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x6d, 0x62, 0x67, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x2c, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x04, 0x0a, 0x0f, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6a, 0x0a, 0x15,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x62,
	0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x6e,
	0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x79, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d,
	0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x65, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x62, 0x67,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x62, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x62, 0x67,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x42, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x62,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x60, 0x0a,
	0x11, 0x67, 0x6f, 0x65, 0x72, 0x74, 0x7a, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x47, 0x6f, 0x65, 0x72, 0x74,
	0x7a, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x67,
	0x6f, 0x65, 0x72, 0x74, 0x7a, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x42,
	0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a,
	0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x62, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2a,
	0xa9, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e,
	0x44, 0x53, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x4f, 0x45, 0x52, 0x54, 0x5a, 0x45, 0x4c,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x52, 0x55, 0x4d, 0x10, 0x06, 0x2a, 0x2f, 0x0a, 0x0a, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x54, 0x4d, 0x41, 0x50, 0x10, 0x02, 0x42, 0x21, 0x5a, 0x1f,
	0x6d, 0x62, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trading_protobuf_indicators_types_proto_rawDescOnce sync.Once
	file_trading_protobuf_indicators_types_proto_rawDescData = file_trading_protobuf_indicators_types_proto_rawDesc
)

func file_trading_protobuf_indicators_types_proto_rawDescGZIP() []byte {
	file_trading_protobuf_indicators_types_proto_rawDescOnce.Do(func() {
		file_trading_protobuf_indicators_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_trading_protobuf_indicators_types_proto_rawDescData)
	})
	return file_trading_protobuf_indicators_types_proto_rawDescData
}

var file_trading_protobuf_indicators_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_trading_protobuf_indicators_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_trading_protobuf_indicators_types_proto_goTypes = []interface{}{
	(IndicatorType)(0),               // 0: mbg.trading.protobuf.indicators.IndicatorType
	(OutputType)(0),                  // 1: mbg.trading.protobuf.indicators.OutputType
	(*IndicatorParams)(nil),          // 2: mbg.trading.protobuf.indicators.IndicatorParams
	(*OutputMetadata)(nil),           // 3: mbg.trading.protobuf.indicators.OutputMetadata
	(*IndicatorMetadata)(nil),        // 4: mbg.trading.protobuf.indicators.IndicatorMetadata
	(*SimpleMovingAverage)(nil),      // 5: mbg.trading.protobuf.indicators.SimpleMovingAverage
	(*ExponentialMovingAverage)(nil), // 6: mbg.trading.protobuf.indicators.ExponentialMovingAverage
	(*StandardDeviation)(nil),        // 7: mbg.trading.protobuf.indicators.StandardDeviation
	(*Variance)(nil),                 // 8: mbg.trading.protobuf.indicators.Variance
	(*BollingerBands)(nil),           // 9: mbg.trading.protobuf.indicators.BollingerBands
	(*GoertzelSpectrum)(nil),         // 10: mbg.trading.protobuf.indicators.GoertzelSpectrum
}
var file_trading_protobuf_indicators_types_proto_depIdxs = []int32{
	5,  // 0: mbg.trading.protobuf.indicators.IndicatorParams.simple_moving_average:type_name -> mbg.trading.protobuf.indicators.SimpleMovingAverage
	6,  // 1: mbg.trading.protobuf.indicators.IndicatorParams.exponential_moving_average:type_name -> mbg.trading.protobuf.indicators.ExponentialMovingAverage
	7,  // 2: mbg.trading.protobuf.indicators.IndicatorParams.standard_deviation:type_name -> mbg.trading.protobuf.indicators.StandardDeviation
	8,  // 3: mbg.trading.protobuf.indicators.IndicatorParams.variance:type_name -> mbg.trading.protobuf.indicators.Variance
	9,  // 4: mbg.trading.protobuf.indicators.IndicatorParams.bollinger_bands:type_name -> mbg.trading.protobuf.indicators.BollingerBands
	10, // 5: mbg.trading.protobuf.indicators.IndicatorParams.goertzel_spectrum:type_name -> mbg.trading.protobuf.indicators.GoertzelSpectrum
	1,  // 6: mbg.trading.protobuf.indicators.OutputMetadata.type:type_name -> mbg.trading.protobuf.indicators.OutputType
	0,  // 7: mbg.trading.protobuf.indicators.IndicatorMetadata.indicator_type:type_name -> mbg.trading.protobuf.indicators.IndicatorType
	3,  // 8: mbg.trading.protobuf.indicators.IndicatorMetadata.outputs:type_name -> mbg.trading.protobuf.indicators.OutputMetadata
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_trading_protobuf_indicators_types_proto_init() }
func file_trading_protobuf_indicators_types_proto_init() {
	if File_trading_protobuf_indicators_types_proto != nil {
		return
	}
	file_trading_protobuf_indicators_indicators_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trading_protobuf_indicators_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading_protobuf_indicators_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trading_protobuf_indicators_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IndicatorParams_SimpleMovingAverage)(nil),
		(*IndicatorParams_ExponentialMovingAverage)(nil),
		(*IndicatorParams_StandardDeviation)(nil),
		(*IndicatorParams_Variance)(nil),
		(*IndicatorParams_BollingerBands)(nil),
		(*IndicatorParams_GoertzelSpectrum)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trading_protobuf_indicators_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trading_protobuf_indicators_types_proto_goTypes,
		DependencyIndexes: file_trading_protobuf_indicators_types_proto_depIdxs,
		EnumInfos:         file_trading_protobuf_indicators_types_proto_enumTypes,
		MessageInfos:      file_trading_protobuf_indicators_types_proto_msgTypes,
	}.Build()
	File_trading_protobuf_indicators_types_proto = out.File
	file_trading_protobuf_indicators_types_proto_rawDesc = nil
	file_trading_protobuf_indicators_types_proto_goTypes = nil
	file_trading_protobuf_indicators_types_proto_depIdxs = nil
}
